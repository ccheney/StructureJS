{
    "project": {
        "name": "StructureJS",
        "description": "Code and documentation for the StructureJS library.",
        "version": "0.9.0",
        "url": ""
    },
    "files": {
        "js/controller/ApplicationCacheController.js": {
            "name": "js/controller/ApplicationCacheController.js",
            "modules": {},
            "classes": {
                "ApplicationCacheController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/controller/LocalStorageController.js": {
            "name": "js/controller/LocalStorageController.js",
            "modules": {},
            "classes": {
                "LocalStorageController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/controller/Router.js": {
            "name": "js/controller/Router.js",
            "modules": {},
            "classes": {
                "Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/display/CanvasElement.js": {
            "name": "js/display/CanvasElement.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/display/DOMElement.js": {
            "name": "js/display/DOMElement.js",
            "modules": {},
            "classes": {
                "DOMElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/display/DisplayObject.js": {
            "name": "js/display/DisplayObject.js",
            "modules": {},
            "classes": {
                "DisplayObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/display/DisplayObjectContainer.js": {
            "name": "js/display/DisplayObjectContainer.js",
            "modules": {},
            "classes": {
                "DisplayObjectContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/display/Stage.js": {
            "name": "js/display/Stage.js",
            "modules": {},
            "classes": {
                "Stage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/event/native/MouseEvents.js": {
            "name": "js/event/native/MouseEvents.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/event/native/NavigatorEvents.js": {
            "name": "js/event/native/NavigatorEvents.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/event/native/WindowEvents.js": {
            "name": "js/event/native/WindowEvents.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/event/ApplicationCacheEvent.js": {
            "name": "js/event/ApplicationCacheEvent.js",
            "modules": {},
            "classes": {
                "ApplicationCacheEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/event/BaseEvent.js": {
            "name": "js/event/BaseEvent.js",
            "modules": {},
            "classes": {
                "BaseEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/event/BulkLoaderEvent.js": {
            "name": "js/event/BulkLoaderEvent.js",
            "modules": {},
            "classes": {
                "BulkLoaderEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/event/EventBroker.js": {
            "name": "js/event/EventBroker.js",
            "modules": {},
            "classes": {
                "EventBroker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/event/EventDispatcher.js": {
            "name": "js/event/EventDispatcher.js",
            "modules": {},
            "classes": {
                "EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/event/LoaderEvent.js": {
            "name": "js/event/LoaderEvent.js",
            "modules": {},
            "classes": {
                "LoaderEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/event/LocalStorageEvent.js": {
            "name": "js/event/LocalStorageEvent.js",
            "modules": {},
            "classes": {
                "LocalStorageEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/event/NetworkMonitorEvent.js": {
            "name": "js/event/NetworkMonitorEvent.js",
            "modules": {},
            "classes": {
                "NetworkMonitorEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/event/RouterEvent.js": {
            "name": "js/event/RouterEvent.js",
            "modules": {},
            "classes": {
                "RouterEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/event/TimerEvent.js": {
            "name": "js/event/TimerEvent.js",
            "modules": {},
            "classes": {
                "TimerEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/geom/Point.js": {
            "name": "js/geom/Point.js",
            "modules": {},
            "classes": {
                "Point": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/model/BaseModel.js": {
            "name": "js/model/BaseModel.js",
            "modules": {},
            "classes": {
                "BaseModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/model/Collection.js": {
            "name": "js/model/Collection.js",
            "modules": {},
            "classes": {
                "Collection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/model/Route.js": {
            "name": "js/model/Route.js",
            "modules": {},
            "classes": {
                "Route": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/net/NetworkMonitor.js": {
            "name": "js/net/NetworkMonitor.js",
            "modules": {},
            "classes": {
                "NetworkMonitor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/plugin/jquery.eventListener.js": {
            "name": "js/plugin/jquery.eventListener.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/util/BrowserUtil.js": {
            "name": "js/util/BrowserUtil.js",
            "modules": {},
            "classes": {
                "BrowserUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/BulkLoader.js": {
            "name": "js/util/BulkLoader.js",
            "modules": {},
            "classes": {
                "BulkLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/ComponentFactory.js": {
            "name": "js/util/ComponentFactory.js",
            "modules": {},
            "classes": {
                "ComponentFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/DateUtil.js": {
            "name": "js/util/DateUtil.js",
            "modules": {},
            "classes": {
                "DateUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/Extend.js": {
            "name": "js/util/Extend.js",
            "modules": {},
            "classes": {
                "Extend": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/ImageLoader.js": {
            "name": "js/util/ImageLoader.js",
            "modules": {},
            "classes": {
                "ImageLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/MathUtil.js": {
            "name": "js/util/MathUtil.js",
            "modules": {},
            "classes": {
                "MathUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/MerchantUtil.js": {
            "name": "js/util/MerchantUtil.js",
            "modules": {},
            "classes": {
                "MerchantUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/NumberUtil.js": {
            "name": "js/util/NumberUtil.js",
            "modules": {},
            "classes": {
                "NumberUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/StringUtil.js": {
            "name": "js/util/StringUtil.js",
            "modules": {},
            "classes": {
                "StringUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/TemplateFactory.js": {
            "name": "js/util/TemplateFactory.js",
            "modules": {},
            "classes": {
                "TemplateFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/Timer.js": {
            "name": "js/util/Timer.js",
            "modules": {},
            "classes": {
                "Timer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/Util.js": {
            "name": "js/util/Util.js",
            "modules": {},
            "classes": {
                "Util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util/ValidationUtil.js": {
            "name": "js/util/ValidationUtil.js",
            "modules": {},
            "classes": {
                "ValidationUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/BaseObject.js": {
            "name": "js/BaseObject.js",
            "modules": {},
            "classes": {
                "BaseObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/ObjectManager.js": {
            "name": "js/ObjectManager.js",
            "modules": {},
            "classes": {
                "ObjectManager": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "StructureJS": {
            "name": "StructureJS",
            "submodules": {
                "controller": 1,
                "view": 1,
                "event": 1,
                "geom": 1,
                "model": 1,
                "util": 1,
                "core": 1
            },
            "classes": {
                "ApplicationCacheController": 1,
                "LocalStorageController": 1,
                "Router": 1,
                "DOMElement": 1,
                "DisplayObject": 1,
                "DisplayObjectContainer": 1,
                "Stage": 1,
                "ApplicationCacheEvent": 1,
                "BaseEvent": 1,
                "BulkLoaderEvent": 1,
                "EventBroker": 1,
                "EventDispatcher": 1,
                "LoaderEvent": 1,
                "LocalStorageEvent": 1,
                "NetworkMonitorEvent": 1,
                "RouterEvent": 1,
                "TimerEvent": 1,
                "Point": 1,
                "BaseModel": 1,
                "Collection": 1,
                "Route": 1,
                "NetworkMonitor": 1,
                "BrowserUtil": 1,
                "BulkLoader": 1,
                "ComponentFactory": 1,
                "DateUtil": 1,
                "Extend": 1,
                "ImageLoader": 1,
                "MathUtil": 1,
                "MerchantUtil": 1,
                "NumberUtil": 1,
                "StringUtil": 1,
                "TemplateFactory": 1,
                "Timer": 1,
                "Util": 1,
                "ValidationUtil": 1,
                "BaseObject": 1,
                "ObjectManager": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "js/ObjectManager.js",
            "line": 15
        },
        "controller": {
            "name": "controller",
            "submodules": {},
            "classes": {
                "ApplicationCacheController": 1,
                "LocalStorageController": 1,
                "Router": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "The ApplicationCacheController is a static class works with the window applicationCache object.",
            "file": "js/controller/Router.js",
            "line": 12
        },
        "view": {
            "name": "view",
            "submodules": {},
            "classes": {
                "DOMElement": 1,
                "DisplayObject": 1,
                "DisplayObjectContainer": 1,
                "Stage": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "The {{#crossLink \"DOMElement\"}}{{/crossLink}} class is the base view class for all objects that can be placed into the HTML DOM.",
            "file": "js/display/Stage.js",
            "line": 15
        },
        "event": {
            "name": "event",
            "submodules": {},
            "classes": {
                "ApplicationCacheEvent": 1,
                "BaseEvent": 1,
                "BulkLoaderEvent": 1,
                "EventBroker": 1,
                "EventDispatcher": 1,
                "LoaderEvent": 1,
                "LocalStorageEvent": 1,
                "NetworkMonitorEvent": 1,
                "RouterEvent": 1,
                "TimerEvent": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "The ApplicationCacheEvent ....",
            "file": "js/event/TimerEvent.js",
            "line": 15
        },
        "geom": {
            "name": "geom",
            "submodules": {},
            "classes": {
                "Point": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "The Point object represents a location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.",
            "file": "js/geom/Point.js",
            "line": 9
        },
        "model": {
            "name": "model",
            "submodules": {},
            "classes": {
                "BaseModel": 1,
                "Collection": 1,
                "Route": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "Base Model is a design pattern used to transfer data between software application subsystems.\n\n Note: If the data doesn't match the property names you can set the value manually after update super method has been called.\nAlso in the class you inherit BaseModel from you can override the update method to handle the data how you want.",
            "file": "js/model/Route.js",
            "line": 9
        },
        "util": {
            "name": "util",
            "submodules": {},
            "classes": {
                "BrowserUtil": 1,
                "BulkLoader": 1,
                "ComponentFactory": 1,
                "DateUtil": 1,
                "Extend": 1,
                "ImageLoader": 1,
                "MathUtil": 1,
                "MerchantUtil": 1,
                "NumberUtil": 1,
                "StringUtil": 1,
                "TemplateFactory": 1,
                "Timer": 1,
                "Util": 1,
                "ValidationUtil": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "A helper class to detect OS and browsers.",
            "file": "js/util/ValidationUtil.js",
            "line": 9
        },
        "core": {
            "name": "core",
            "submodules": {},
            "classes": {
                "BaseObject": 1,
                "ObjectManager": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "The {{#crossLink \"BaseObject\"}}{{/crossLink}} class is an abstract class that provides common properties and functionality for all StructureJS classes.",
            "file": "js/ObjectManager.js",
            "line": 15
        }
    },
    "classes": {
        "ApplicationCacheController": {
            "name": "ApplicationCacheController",
            "shortname": "ApplicationCacheController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "file": "js/controller/ApplicationCacheController.js",
            "line": 11,
            "description": "The ApplicationCacheController is a static class works with the window applicationCache object.",
            "submodule": "controller",
            "requires": [
                "ApplicationCacheEvent",
                "EventDispatcher"
            ],
            "static": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "LocalStorageController": {
            "name": "LocalStorageController",
            "shortname": "LocalStorageController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/controller/LocalStorageController.js",
            "line": 17,
            "description": "The LocalStorageController...",
            "submodule": "controller",
            "extends": "EventDispatcher",
            "requires": [
                "Extend",
                "EventDispatcher",
                "LocalStorageEvent",
                "BaseModel"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "Router": {
            "name": "Router",
            "shortname": "Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/controller/Router.js",
            "line": 12,
            "description": "The **Router** class is a static class allows you to add different route patterns that can be matched to help control your application. Look at the Router.{{#crossLink \"Router/add:method\"}}{{/crossLink}} method for more details and examples.",
            "submodule": "controller",
            "requires": [
                "Route",
                "RouterEvent",
                "StringUtil"
            ],
            "static": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "DOMElement": {
            "name": "DOMElement",
            "shortname": "DOMElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/display/DOMElement.js",
            "line": 19,
            "description": "The {{#crossLink \"DOMElement\"}}{{/crossLink}} class is the base view class for all objects that can be placed into the HTML DOM.",
            "submodule": "view",
            "params": [
                {
                    "name": "type",
                    "description": "[any=null] Either a jQuery object or JavaScript template string reference you want to use as the view. Check out the examples below."
                },
                {
                    "name": "params",
                    "description": "[any=null] Any data you would like to pass into the jQuery element or template that is being created."
                }
            ],
            "extends": "DisplayObjectContainer",
            "requires": [
                "Extend",
                "DisplayObjectContainer",
                "BaseEvent",
                "TemplateFactory",
                "ComponentFactory",
                "jQuery"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)",
            "example": [
                "\n    // Example: Using DOMElement without extending it.\n    var aLink = new DOMElement('a', {text: 'Google', href: 'http://www.google.com', 'class': 'externalLink'});\n    this.addChild(aLink);\n\n    // Example: A view passing in a jQuery object.\n    var view = new CustomView($('.selector'));\n    this.addChild(view);\n\n    // Example: A view extending DOMElement while passing in a jQuery object.\n    var Extend = require('structurejs/util/Extend');\n    var DOMElement = require('structurejs/display/DOMElement');\n\n    var ClassName = (function () {\n\n         var _super = Extend(ClassName, DOMElement);\n\n         function ClassName($element) {\n             _super.call(this, $element);\n         }\n\n         ClassName.prototype.create = function () {\n             _super.prototype.create.call(this);\n\n             // Create and add your child objects to this parent class.\n         };\n\n         ClassName.prototype.enable = function () {\n             if (this.isEnabled === true) { return this; }\n\n             // Enable the child objects and add any event listeners.\n\n             return _super.prototype.enable.call(this);\n         };\n\n         ClassName.prototype.disable = function () {\n             if (this.isEnabled === false) { return this; }\n\n             // Disable the child objects and remove any event listeners.\n\n             return _super.prototype.disable.call(this);\n         };\n\n         ClassName.prototype.layout = function () {\n             // Layout or update the child objects in this parent class.\n\n             return this;\n         };\n\n         ClassName.prototype.destroy = function () {\n             // Destroy the child objects and references in this parent class to prevent memory leaks.\n\n             _super.prototype.destroy.call(this);\n         };\n\n         return ClassName;\n    })();\n\n    // Example: A view extending DOMElement with a JavaScript template reference passed in.\n    var Extend = require('structurejs/util/Extend');\n    var DOMElement = require('structurejs/display/DOMElement');\n    var HomeTemplate = require('hbs!templates/home/homeTemplate');\n\n    var ClassName = (function () {\n\n         var _super = Extend(ClassName, DOMElement);\n\n         function ClassName() {\n             _super.call(this);\n         }\n\n         ClassName.prototype.create = function () {\n             _super.prototype.create.call(this, HomeTemplate, {data: 'some data'});\n\n             // Create and add your child objects to this parent class.\n         };\n\n         ClassName.prototype.enable = function () {\n             if (this.isEnabled === true) { return this; }\n\n             // Enable the child objects and add any event listeners.\n\n             return _super.prototype.enable.call(this);\n         };\n\n         ClassName.prototype.disable = function () {\n             if (this.isEnabled === false) { return this; }\n\n             // Disable the child objects and remove any event listeners.\n\n             return _super.prototype.disable.call(this);\n         };\n\n         ClassName.prototype.layout = function () {\n             // Layout or update the child objects in this parent class.\n\n             return this;\n         };\n\n         ClassName.prototype.destroy = function () {\n             // Destroy the child objects and references in this parent class to prepare for garbage collection.\n\n             _super.prototype.destroy.call(this);\n         };\n\n         return ClassName;\n    })();"
            ]
        },
        "DisplayObject": {
            "name": "DisplayObject",
            "shortname": "DisplayObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/display/DisplayObject.js",
            "line": 15,
            "description": "The {{#crossLink \"DisplayObject\"}}{{/crossLink}} class is the base class for all objects that can be placed on the display list.",
            "submodule": "view",
            "extends": "EventDispatcher",
            "requires": [
                "Extend",
                "EventDispatcher"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "DisplayObjectContainer": {
            "name": "DisplayObjectContainer",
            "shortname": "DisplayObjectContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/display/DisplayObjectContainer.js",
            "line": 15,
            "description": "The {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} class is the base class for all objects that can be placed on the display list.",
            "submodule": "view",
            "extends": "DisplayObject",
            "requires": [
                "Extend",
                "DisplayObject"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "Stage": {
            "name": "Stage",
            "shortname": "Stage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/display/Stage.js",
            "line": 15,
            "description": "The {{#crossLink \"Stage\"}}{{/crossLink}} class should be extended by your main application or root class.",
            "submodule": "view",
            "extends": "DOMElement",
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)",
            "requires": [
                "Extend",
                "DOMElement",
                "jQuery"
            ],
            "example": [
                "\n    // This example illustrates how to setup your main application or root class when extending the {{#crossLink \"Stage\"}}{{/crossLink}} class.\n    define(function (require, exports, module) {\n        'use strict';\n\n        var Extend = require('structurejs/util/Extend');\n        var Stage = require('replace/path/Stage');\n\n        var MainClass = (function () {\n\n        var _super = Extend(MainClass, Stage);\n\n            function MainClass() {\n                _super.call(this);\n            }\n\n            MainClass.prototype.create = function () {\n                _super.prototype.create.call(this);\n\n                // Create and add your child objects to this parent class.\n            }\n\n            MainClass.prototype.layout = function () {\n                // Layout or update the child objects in this parent class.\n\n                return this;\n            }\n\n            MainClass.prototype.enable = function () {\n                if (this.isEnabled === true) { return this };\n\n                // Enable the child objects and add any event listeners.\n\n                return _super.prototype.enable.call(this);\n            }\n\n            MainClass.prototype.disable = function () {\n                if (this.isEnabled === false) { return this };\n\n                // Disable the child objects and remove any event listeners.\n\n                return _super.prototype.disable.call(this);\n            }\n\n            MainClass.prototype.destroy = function () {\n                // Destroy the child objects and references in this parent class to prepare for garbage collection.\n\n                _super.prototype.destroy.call(this);\n            }\n\n            return MainClass;\n        })();\n\n        module.exports = MainClass;\n    });\n\n<b>Instantiation Example</b><br>\nThis example illustrates how to instantiate your main application or root class.\n\n     var app = new MainClass();\n     app.appendTo('body');\n"
            ]
        },
        "ApplicationCacheEvent": {
            "name": "ApplicationCacheEvent",
            "shortname": "ApplicationCacheEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/event/ApplicationCacheEvent.js",
            "line": 15,
            "description": "The ApplicationCacheEvent ....",
            "submodule": "event",
            "extends": "BaseEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event. The type is case-sensitive.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether an event is a bubbling event. If the event can bubble, this value is true; otherwise it is false.\nNote: With event-bubbling you can let one Event subsequently call on every ancestor ({{#crossLink \"EventDispatcher/parent:property\"}}{{/crossLink}})\n(containers of containers of etc.) of the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that originally dispatched the Event, all the way up to the surface ({{#crossLink \"Stage\"}}{{/crossLink}}). Any classes that do not have a parent cannot bubble.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the behavior associated with the event can be prevented. If the behavior can be canceled, this value is true; otherwise it is false.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Use to pass any type of data with the event.",
                    "type": "Any",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "requires": [
                "Extend",
                "BaseEvent"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "BaseEvent": {
            "name": "BaseEvent",
            "shortname": "BaseEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/event/BaseEvent.js",
            "line": 15,
            "description": "The {{#crossLink \"BaseEvent\"}}{{/crossLink}} class is used as the base class for the creation of Event objects, which are passed as parameters to event listeners when an event occurs.\n\nThe properties of the {{#crossLink \"BaseEvent\"}}{{/crossLink}} class carry basic information about an event, such as the event's type or whether the event's default behavior can be canceled.\n\nFor many events, such as the events represented by the Event class constants, this basic information is sufficient. Other events, however, may require more\ndetailed information.",
            "submodule": "event",
            "extends": "BaseObject",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event. The type is case-sensitive.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether an event is a bubbling event. If the event can bubble, this value is true; otherwise it is false.\nNote: With event-bubbling you can let one Event subsequently call on every ancestor ({{#crossLink \"EventDispatcher/parent:property\"}}{{/crossLink}})\n(containers of containers of etc.) of the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that originally dispatched the Event, all the way up to the surface ({{#crossLink \"Stage\"}}{{/crossLink}}). Any classes that do not have a parent cannot bubble.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the behavior associated with the event can be prevented. If the behavior can be canceled, this value is true; otherwise it is false.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Use to pass any type of data with the event.",
                    "type": "Any",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "requires": [
                "Extend",
                "BaseObject"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)",
            "example": [
                "\n    // Example: how to create a custom event by extending BaseEvent.\n    var Extend = require('structurejs/util/Extend');\n    var BaseEvent = require('structurejs/event/BaseEvent');\n\n    var CountryEvent = (function () {\n\n         var _super = Extend(CountryEvent, BaseEvent);\n\n         CountryEvent.CHANGE_COUNTRY = \"CountryEvent.changeCountry\";\n\n         function CountryEvent(type, bubbles, cancelable, data) {\n             _super.call(this, type, bubbles, cancelable, data);\n\n             this.countryName = null;\n         }\n\n          return CountryEvent;\n     })();\n\n    // Example: how to use the custom event.\n    var event = new CountryEvent(CountryEvent.CHANGE_COUNTRY);\n    event.countryName = 'Canada';\n    this.dispatchEvent(event);"
            ]
        },
        "BulkLoaderEvent": {
            "name": "BulkLoaderEvent",
            "shortname": "BulkLoaderEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/event/BulkLoaderEvent.js",
            "line": 15,
            "description": "The BulkLoaderEvent...",
            "submodule": "event",
            "extends": "BaseEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event. The type is case-sensitive.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether an event is a bubbling event. If the event can bubble, this value is true; otherwise it is false.\nNote: With event-bubbling you can let one Event subsequently call on every ancestor ({{#crossLink \"EventDispatcher/parent:property\"}}{{/crossLink}})\n(containers of containers of etc.) of the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that originally dispatched the Event, all the way up to the surface ({{#crossLink \"Stage\"}}{{/crossLink}}). Any classes that do not have a parent cannot bubble.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the behavior associated with the event can be prevented. If the behavior can be canceled, this value is true; otherwise it is false.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Use to pass any type of data with the event.",
                    "type": "Any",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "requires": [
                "Extend",
                "BaseEvent"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "EventBroker": {
            "name": "EventBroker",
            "shortname": "EventBroker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/event/EventBroker.js",
            "line": 11,
            "description": "EventBroker is a simple publish and subscribe static class that you can use to fire and receive notifications.\nLoosely coupled event handling, the subscriber does not know the publisher. Both of them only need to know the event type.",
            "submodule": "event",
            "requires": [
                "EventDispatcher",
                "BaseEvent"
            ],
            "static": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "EventDispatcher": {
            "name": "EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/event/EventDispatcher.js",
            "line": 16,
            "description": "EventDispatcher is the base class for all classes that dispatch events. It is the base class for the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} class.\nEventDispatcher provides methods for managing prioritized queues of event listeners and dispatching events.",
            "submodule": "event",
            "extends": "ObjectManager",
            "requires": [
                "Extend",
                "ObjectManager",
                "BaseEvent"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)",
            "example": [
                "\n     // Extending EventDispatcher. See DisplayObjectContainer as an example that extends EventDispatcher.\n     var _super = Extend(ClassExtendingEventDispatcher, EventDispatcher);\n\n     // Another way to use the EventDispatcher.\n     var eventDispatcher = new EventDispatcher();\n     eventDispatcher.addEventListener('change', this.handlerMethod, this);\n     eventDispatcher.dispatchEvent('change');"
            ]
        },
        "LoaderEvent": {
            "name": "LoaderEvent",
            "shortname": "LoaderEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/event/LoaderEvent.js",
            "line": 15,
            "description": "The LoaderEvent...",
            "submodule": "event",
            "extends": "BaseEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event. The type is case-sensitive.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether an event is a bubbling event. If the event can bubble, this value is true; otherwise it is false.\nNote: With event-bubbling you can let one Event subsequently call on every ancestor ({{#crossLink \"EventDispatcher/parent:property\"}}{{/crossLink}})\n(containers of containers of etc.) of the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that originally dispatched the Event, all the way up to the surface ({{#crossLink \"Stage\"}}{{/crossLink}}). Any classes that do not have a parent cannot bubble.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the behavior associated with the event can be prevented. If the behavior can be canceled, this value is true; otherwise it is false.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Use to pass any type of data with the event.",
                    "type": "Any",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "requires": [
                "Extend",
                "BaseEvent"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "LocalStorageEvent": {
            "name": "LocalStorageEvent",
            "shortname": "LocalStorageEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/event/LocalStorageEvent.js",
            "line": 15,
            "description": "The LocalStorageEvent ....\nNote: the event only dispatches in other browser windows and does not show up in the window where you made a change to the local storage.",
            "submodule": "event",
            "extends": "BaseEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event. The type is case-sensitive.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether an event is a bubbling event. If the event can bubble, this value is true; otherwise it is false.\nNote: With event-bubbling you can let one Event subsequently call on every ancestor ({{#crossLink \"EventDispatcher/parent:property\"}}{{/crossLink}})\n(containers of containers of etc.) of the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that originally dispatched the Event, all the way up to the surface ({{#crossLink \"Stage\"}}{{/crossLink}}). Any classes that do not have a parent cannot bubble.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the behavior associated with the event can be prevented. If the behavior can be canceled, this value is true; otherwise it is false.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "nativeEvent",
                    "description": "The native browser event for localStorage.",
                    "type": "StorageEvent"
                }
            ],
            "requires": [
                "Extend",
                "BaseEvent"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "NetworkMonitorEvent": {
            "name": "NetworkMonitorEvent",
            "shortname": "NetworkMonitorEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/event/NetworkMonitorEvent.js",
            "line": 15,
            "description": "The NetworkMonitorEvent...",
            "submodule": "event",
            "extends": "BaseEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event. The type is case-sensitive.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether an event is a bubbling event. If the event can bubble, this value is true; otherwise it is false.\nNote: With event-bubbling you can let one Event subsequently call on every ancestor ({{#crossLink \"EventDispatcher/parent:property\"}}{{/crossLink}})\n(containers of containers of etc.) of the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that originally dispatched the Event, all the way up to the surface ({{#crossLink \"Stage\"}}{{/crossLink}}). Any classes that do not have a parent cannot bubble.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the behavior associated with the event can be prevented. If the behavior can be canceled, this value is true; otherwise it is false.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Use to pass any type of data with the event.",
                    "type": "Any",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "requires": [
                "Extend",
                "BaseEvent"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "RouterEvent": {
            "name": "RouterEvent",
            "shortname": "RouterEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/event/RouterEvent.js",
            "line": 15,
            "description": "The RouterEvent is used in the {{#crossLink \"Router\"}}{{/crossLink}} class and gets passed to the callback in the {{#crossLink \"Route\"}}{{/crossLink}} class.",
            "submodule": "event",
            "extends": "BaseEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event. The type is case-sensitive.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether an event is a bubbling event. If the event can bubble, this value is true; otherwise it is false.\nNote: With event-bubbling you can let one Event subsequently call on every ancestor ({{#crossLink \"EventDispatcher/parent:property\"}}{{/crossLink}})\n(containers of containers of etc.) of the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that originally dispatched the Event, all the way up to the surface ({{#crossLink \"Stage\"}}{{/crossLink}}). Any classes that do not have a parent cannot bubble.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the behavior associated with the event can be prevented. If the behavior can be canceled, this value is true; otherwise it is false.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Use to pass any type of data with the event.",
                    "type": "Any",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "requires": [
                "Extend",
                "BaseEvent"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "TimerEvent": {
            "name": "TimerEvent",
            "shortname": "TimerEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/event/TimerEvent.js",
            "line": 15,
            "description": "The TimerEvent...",
            "submodule": "event",
            "extends": "BaseEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event. The type is case-sensitive.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether an event is a bubbling event. If the event can bubble, this value is true; otherwise it is false.\nNote: With event-bubbling you can let one Event subsequently call on every ancestor ({{#crossLink \"EventDispatcher/parent:property\"}}{{/crossLink}})\n(containers of containers of etc.) of the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that originally dispatched the Event, all the way up to the surface ({{#crossLink \"Stage\"}}{{/crossLink}}). Any classes that do not have a parent cannot bubble.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the behavior associated with the event can be prevented. If the behavior can be canceled, this value is true; otherwise it is false.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Use to pass any type of data with the event.",
                    "type": "Any",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "requires": [
                "Extend",
                "BaseEvent"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "Point": {
            "name": "Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/geom/Point.js",
            "line": 9,
            "description": "The Point object represents a location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.",
            "submodule": "geom",
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "BaseModel": {
            "name": "BaseModel",
            "shortname": "BaseModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/model/BaseModel.js",
            "line": 16,
            "description": "Base Model is a design pattern used to transfer data between software application subsystems.\n\n Note: If the data doesn't match the property names you can set the value manually after update super method has been called.\nAlso in the class you inherit BaseModel from you can override the update method to handle the data how you want.",
            "submodule": "model",
            "extends": "BaseObject",
            "params": [
                {
                    "name": "data",
                    "description": "Provide a way to update the  Base Model upon initialization.",
                    "type": "Any",
                    "optional": true
                }
            ],
            "requires": [
                "Extend",
                "BaseObject",
                "Util"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)",
            "example": [
                "\n    // Example how to extend the BaseModel class.\n    var data = {\n            make: 'Tesla',\n            model: 'Model S',\n            YeAr: 2014,\n            feature: {\n                abs: true,\n                airbags: true\n            }\n    }\n    var carModel = new CarModel(data);\n\n\n    // Example how to extend the BaseModel class.\n    var CarModel = (function () {\n        var _super = Extend(CarModel, BaseModel);\n        function CarModel(data) {\n            _super.call(this);\n\n            // You need to have properties so the data will get assigned.\n            // If not the data will not get assigned to the vo.\n            this.make = null;\n            this.model = null;\n            this.year = null;\n            this.allWheel = false; // Set a default value.\n\n            // You can assign BaseModel to a property which will\n            // automatically created it and pass the data to it.\n            this.feature = FeatureModel;\n\n            // If you have an array of data and want them assign to a BaseModel.\n            this.feature = [FeatureModel];\n\n            if (data) {\n                this.update(data);\n            }\n        }\n\n        // @overridden BaseModel.update\n        CarModel.prototype.update = function (data) {\n            _super.prototype.update.call(this, data);\n\n            // If the data doesn't match the property name.\n            // You can set the value(s) manually after the update super method has been called.\n            this.year = data.YeAr;\n        };\n\n        return CarModel;\n    })();"
            ]
        },
        "Collection": {
            "name": "Collection",
            "shortname": "Collection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/model/Collection.js",
            "line": 17,
            "description": "The Collection class provides a way for you to manage your models.",
            "submodule": "model",
            "extends": "EventDispatcher",
            "requires": [
                "Extend",
                "EventDispatcher",
                "BaseEvent"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "baseModelType",
                    "description": "Pass a class that extends BaseModel and the data added to the collection will be created as that type.",
                    "type": "BaseModel"
                }
            ],
            "author": "Robert S. (www.codeBelt.com)",
            "example": [
                "\n    var data = [{ make: 'Tesla', model: 'Model S', year: 2014 }, { make: 'Tesla', model: 'Model X', year: 2016 }];\n\n    // Example of adding data to a collection\n    var collection = new Collection();\n    collection.add(data);\n\n    // Example of adding data to a collection that will create a CarModel model for each data object passed in.\n    var collection = new Collection(CarModel);\n    collection.add(data);"
            ]
        },
        "Route": {
            "name": "Route",
            "shortname": "Route",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/model/Route.js",
            "line": 9,
            "description": "The **Route** class is a model that keeps track of a specific route for the {{#crossLink \"Router\"}}{{/crossLink}} class.",
            "submodule": "model",
            "params": [
                {
                    "name": "routePattern",
                    "description": "The string pattern you want to have match, which can be any of the following combinations {}, ::, *, ''",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function that should be executed when a request matches the routePattern.",
                    "type": "Function"
                },
                {
                    "name": "callbackScope",
                    "description": "The scope of the callback function that should be executed.",
                    "type": "Any"
                }
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)",
            "example": [
                "\n    // Example of adding a route listener and the function callback below.\n    var route = new Route('/games/{gameName}/:level:/', this.onRouteHandler, this);\n\n    // The above route would match the string below:\n    route.match('/games/asteroids/2/');\n\nRoute Pattern Options:\n----------------------\n**:optional:** The two colons **::** means a part of the hash url is optional for the match. The text between can be anything you want it to be.\n\n    var route = new Route('/contact/:name:/', this.method, this);\n\n    // Will match one of the following:\n    route.match('/contact/');\n    route.match('/contact/heather/');\n    route.match('/contact/john/');\n\n\n**{required}** The two curly brackets **{}** means a part of the hash url is required for the match. The text between can be anything you want it to be.\n\n    var route = new Route('/product/{productName}/', this.method, this);\n\n    // Will match one of the following:\n    route.match('/product/shoes/');\n    route.match('/product/jackets/');\n\n\n**\\*** The asterisk character means it will match all or part of part the hash url.\n\n    var route = new Route('*', this.method, this);\n\n    // Will match one of the following:\n    route.match('/anything/');\n    route.match('/matches/any/hash/url/');\n    route.match('/really/it/matches/any/and/all/hash/urls/');\n\n\n**''** The empty string means it will match when there are no hash url.\n\n    var route = new Route('', this.method, this);\n    var route = new Route('/', this.method, this);\n\n    // Will match one of the following:\n    route.match('');\n    route.match('/');\n\n\nOther possible combinations but not limited too:\n\n    var route = new Route('/games/{gameName}/:level:/', this.method1, this);\n    var route = new Route('/{category}/blog/', this.method2, this);\n    var route = new Route('/about/*', this.method4, this);\n"
            ]
        },
        "NetworkMonitor": {
            "name": "NetworkMonitor",
            "shortname": "NetworkMonitor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/net/NetworkMonitor.js",
            "line": 12,
            "description": "TODO: YUIDoc_comment",
            "is_constructor": 1,
            "requires": [
                "EventDispatcher",
                "NavigatorEvents",
                "NetworkMonitorEvent"
            ],
            "author": "Robert S. (www.codeBelt.com)",
            "static": 1
        },
        "BrowserUtil": {
            "name": "BrowserUtil",
            "shortname": "BrowserUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/BrowserUtil.js",
            "line": 12,
            "description": "A helper class to detect OS and browsers.",
            "submodule": "util",
            "author": "Robert S. (www.codeBelt.com)",
            "static": 1
        },
        "BulkLoader": {
            "name": "BulkLoader",
            "shortname": "BulkLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/BulkLoader.js",
            "line": 18,
            "description": "TODO: YUIDoc_comment",
            "submodule": "util",
            "extends": "EventDispatcher",
            "requires": [
                "Extend",
                "LoaderEvent"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "ComponentFactory": {
            "name": "ComponentFactory",
            "shortname": "ComponentFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/ComponentFactory.js",
            "line": 10,
            "description": "A helper class to create multiple instances of the same Component Class from jQuery object that has one or more elements in it.",
            "submodule": "util",
            "author": "Robert S. (www.codeBelt.com)",
            "static": 1
        },
        "DateUtil": {
            "name": "DateUtil",
            "shortname": "DateUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/DateUtil.js",
            "line": 9,
            "description": "A helper class that deals with dates.",
            "submodule": "util",
            "author": "Robert S. (www.codeBelt.com)",
            "static": 1
        },
        "Extend": {
            "name": "Extend",
            "shortname": "Extend",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/Extend.js",
            "line": 17,
            "description": "A helper method to extend classes.",
            "submodule": "util",
            "params": [
                {
                    "name": "inheritorClass",
                    "description": ""
                },
                {
                    "name": "baseClass",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "is_constructor": 1,
            "example": [
                "\n    var AnotherClass = (function () {\n\n        var _super = Extend(AnotherClass, BaseClass);\n\n        function AnotherClass() {\n            _super.call(this);\n        }\n\n        return AnotherClass;\n    })();"
            ]
        },
        "ImageLoader": {
            "name": "ImageLoader",
            "shortname": "ImageLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/ImageLoader.js",
            "line": 16,
            "description": "The ImageLoader...",
            "submodule": "util",
            "extends": "EventDispatcher",
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "MathUtil": {
            "name": "MathUtil",
            "shortname": "MathUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/MathUtil.js",
            "line": 9,
            "description": "A helper class to do calculations and conversions.",
            "submodule": "util",
            "author": "Robert S. (www.codeBelt.com)",
            "static": 1
        },
        "MerchantUtil": {
            "name": "MerchantUtil",
            "shortname": "MerchantUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/MerchantUtil.js",
            "line": 9,
            "description": "A MerchantUtility class that has several static methods to assist in development.",
            "submodule": "util",
            "author": "Robert S. (www.codeBelt.com)",
            "static": 1
        },
        "NumberUtil": {
            "name": "NumberUtil",
            "shortname": "NumberUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/NumberUtil.js",
            "line": 9,
            "description": "The NumberUtil class has many helper methods to work with number data.",
            "submodule": "util",
            "author": "Robert S. (www.codeBelt.com)",
            "static": 1
        },
        "StringUtil": {
            "name": "StringUtil",
            "shortname": "StringUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/StringUtil.js",
            "line": 9,
            "description": "The StringUtil...",
            "submodule": "util",
            "author": "Robert S. (www.codeBelt.com)",
            "static": 1
        },
        "TemplateFactory": {
            "name": "TemplateFactory",
            "shortname": "TemplateFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/TemplateFactory.js",
            "line": 10,
            "description": "A helper class to provide a convenient and consistent way to render templates.",
            "submodule": "util",
            "requires": [
                "StringUtil",
                "Handlebars"
            ],
            "author": "Robert S. (www.codeBelt.com)",
            "static": 1
        },
        "Timer": {
            "name": "Timer",
            "shortname": "Timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/Timer.js",
            "line": 16,
            "description": "Constructs a new Timer object with the specified delay and repeatCount states.",
            "submodule": "util",
            "extends": "EventDispatcher",
            "requires": [
                "Extend",
                "EventDispatcher",
                "TimerEvent"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "Util": {
            "name": "Util",
            "shortname": "Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/Util.js",
            "line": 9,
            "description": "A Utility class that has several static methods to assist in development.",
            "submodule": "util",
            "author": "Robert S. (www.codeBelt.com)",
            "static": 1
        },
        "ValidationUtil": {
            "name": "ValidationUtil",
            "shortname": "ValidationUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/util/ValidationUtil.js",
            "line": 9,
            "description": "A ValidationUtility class that has several static methods to assist in development.",
            "submodule": "util",
            "author": "Robert S. (www.codeBelt.com)",
            "static": 1
        },
        "BaseObject": {
            "name": "BaseObject",
            "shortname": "BaseObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/BaseObject.js",
            "line": 15,
            "description": "The {{#crossLink \"BaseObject\"}}{{/crossLink}} class is an abstract class that provides common properties and functionality for all StructureJS classes.",
            "submodule": "core",
            "requires": [
                "Util"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        },
        "ObjectManager": {
            "name": "ObjectManager",
            "shortname": "ObjectManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "js/ObjectManager.js",
            "line": 15,
            "description": "The {{#crossLink \"ObjectManager\"}}{{/crossLink}} class is an abstract class that provides enabling and disabling functionality for most StructureJS classes.",
            "submodule": "core",
            "extends": "BaseObject",
            "requires": [
                "Extend",
                "BaseObject"
            ],
            "is_constructor": 1,
            "author": "Robert S. (www.codeBelt.com)"
        }
    },
    "classitems": [
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 26,
            "overridden": "BaseObject.enable",
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 44,
            "overridden": "BaseObject.disable",
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 89,
            "description": "The resources listed in the manifest have been fully downloaded, and the application is\nnow cached locally.",
            "itemtype": "method",
            "name": "onCached",
            "params": [
                {
                    "name": "event",
                    "description": "The native browser event from the DOMApplicationCache.",
                    "type": "DOMApplicationCacheEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 102,
            "description": "The browser is checking for an update, or is attempting to download\nthe cache manifest for the first time. This is always the first event\nin the sequence.",
            "itemtype": "method",
            "name": "onChecking",
            "params": [
                {
                    "name": "event",
                    "description": "The native browser event from the DOMApplicationCache.",
                    "type": "DOMApplicationCacheEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 116,
            "description": "The browser has started to download the cache manifest, either for the\nfirst time or because changes have been detected.",
            "itemtype": "method",
            "name": "onDownloading",
            "params": [
                {
                    "name": "event",
                    "description": "The native browser event from the DOMApplicationCache.",
                    "type": "DOMApplicationCacheEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 129,
            "description": "An error occurred at some point - this could be caused by a number of things. This will\nalways be the last event in the sequence.",
            "itemtype": "method",
            "name": "onError",
            "params": [
                {
                    "name": "event",
                    "description": "The native browser event from the DOMApplicationCache.",
                    "type": "DOMApplicationCacheEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 142,
            "description": "The cache manifest hadn't changed.",
            "itemtype": "method",
            "name": "onNoUpdate",
            "params": [
                {
                    "name": "event",
                    "description": "The native browser event from the DOMApplicationCache.",
                    "type": "DOMApplicationCacheEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 154,
            "description": "The cache manifest file could not be found, indicating that the cache is no longer needed.\nThe application cache is being deleted.",
            "itemtype": "method",
            "name": "onObsolete",
            "params": [
                {
                    "name": "event",
                    "description": "The native browser event from the DOMApplicationCache.",
                    "type": "DOMApplicationCacheEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 167,
            "description": "The browser had downloaded and cached an asset. This is fired once for\nevery file that is downloaded (including the current page which is cached implicitly).",
            "itemtype": "method",
            "name": "onProgress",
            "params": [
                {
                    "name": "event",
                    "description": "The native browser event from the DOMApplicationCache.",
                    "type": "DOMApplicationCacheEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 180,
            "description": "The resources listed in the manifest have been newly re-downloaded, and the script can\nuse swapCache() to switch to the new cache.",
            "itemtype": "method",
            "name": "onUpdateReady",
            "params": [
                {
                    "name": "event",
                    "description": "The native browser event from the DOMApplicationCache.",
                    "type": "DOMApplicationCacheEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 193,
            "description": "Registers an event listener object with an ApplicationCacheController object so that the listener receives notification of an event.",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener function that processes the event. This function must accept an Event object as its only parameter and must return nothing, as this example shows. @example function(event:Event):void",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "Binds the scope to a particular object (scope is basically what \"this\" refers to in your function). This can be very useful in JavaScript because scope isn't generally maintained.",
                    "type": "Any"
                },
                {
                    "name": "priority",
                    "description": "Influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "static": 1,
            "example": [
                "\n     ApplicationCacheController.addEventListener(ApplicationCacheEvent.UPDATE_READY, this.handlerMethod, this);\n     ClassName.prototype.handlerMethod = function(event) {\n         console.log(event.target + \" sent the event.\");\n     }"
            ],
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 212,
            "description": "Removes a specified listener from the ApplicationCacheController object.",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener object to remove.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope of the listener object to be removed. This was added because it was need for the {{#crossLink \"ApplicationCacheController\"}}{{/crossLink}} class.\nTo keep things consistent this parameter is required.",
                    "type": "Any"
                }
            ],
            "static": 1,
            "example": [
                "\n     ApplicationCacheController.removeEventListener(ApplicationCacheEvent.UPDATE_READY, this.handlerMethod, this);\n     ClassName.prototype.handlerMethod = function(event) {\n         console.log(event.target + \" sent the event.\");\n     }"
            ],
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 230,
            "description": "<p>Dispatches an event within the ApplicationCacheController object.</p>",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The Event object that is dispatched into the event flow. You can create custom events, the only requirement is all events must\nextend the {{#crossLink \"ApplicationCacheEvent\"}}{{/crossLink}}.",
                    "type": "ApplicationCacheEvent"
                }
            ],
            "static": 1,
            "example": [
                "\n     var event:ApplicationCacheEvent = new ApplicationCacheEvent(ApplicationCacheEvent.UPDATE_READY);\n     ApplicationCacheController.dispatchEvent(event);\n\n     // Here is a common inline event being dispatched\n     ApplicationCacheController.dispatchEvent(new ApplicationCacheEvent(ApplicationCacheEvent.UPDATE_READY));"
            ],
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 247,
            "description": "A reference to the applicationCache property on the window object.",
            "itemtype": "property",
            "name": "_appCache",
            "type": "{ApplicationCache}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 256,
            "description": "A reference to the EventDispatcher object.",
            "itemtype": "property",
            "name": "_eventDispatcher",
            "type": "{EventDispatcher}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/ApplicationCacheController.js",
            "line": 265,
            "description": "The isEnabled property is used to keep track of the enabled state.",
            "itemtype": "property",
            "name": "isEnabled",
            "type": "{boolean}",
            "default": "false",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "ApplicationCacheController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 35,
            "description": "Current user namespace. The namespace is optional.",
            "itemtype": "property",
            "name": "_namespace",
            "type": "{string}",
            "default": "defaultNamespace",
            "optional": 1,
            "access": "protected",
            "tagname": "",
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 45,
            "description": "A reference to window.localStorage for faster access.",
            "itemtype": "property",
            "name": "_localStorage",
            "type": "{Storage}",
            "access": "protected",
            "tagname": "",
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 56,
            "description": "Set storage namespace",
            "itemtype": "method",
            "name": "setNamespace",
            "params": [
                {
                    "name": "namespace",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 66,
            "description": "Get storage namespace",
            "itemtype": "method",
            "name": "getNamespace",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 75,
            "description": "Add a key/value pair to localStorage.",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "useNamespace",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 101,
            "description": "Retrieves the current value associated with the Local Storage key.",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "useNamespace",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 126,
            "description": "Returns all items in local storage as an Object with key and value properties that has a certain namespace.",
            "itemtype": "method",
            "name": "getItemsWithNamespace",
            "params": [
                {
                    "name": "namespace",
                    "description": "The namespace that is used to items. If a namespace is not passed in then the current set namespace will be used.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 150,
            "description": "Returns all items in local storage as an Object with key and value properties.",
            "itemtype": "method",
            "name": "getAllItems",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 170,
            "description": "Deletes a key/value pair from the Local Storage collection.",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "useNamespace",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 191,
            "description": "Returns the number of items storage in local storage.",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 200,
            "description": "Returns the size of the Local Storage.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 209,
            "description": "Removes all key/value pairs from the Local Storage area.",
            "itemtype": "method",
            "name": "clear",
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 217,
            "overridden": "EventDispatcher.destroy",
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/LocalStorageController.js",
            "line": 223,
            "itemtype": "method",
            "name": "onLocalStorageEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The native browser event for Web Storage.",
                    "type": "StorageEvent"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "LocalStorageController",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 28,
            "description": "The **Router.add** method allows you to listen for route patterns to be matched. When a match is found the callback will be executed passing a {{#crossLink \"RouterEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "routePattern",
                    "description": "The string pattern you want to have match, which can be any of the following combinations {}, ::, *, ?, ''. See the examples below for more details.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function that should be executed when a request matches the routePattern. It will receive a {{#crossLink \"RouterEvent\"}}{{/crossLink}} object.",
                    "type": "Function"
                },
                {
                    "name": "callbackScope",
                    "description": "The scope of the callback function that should be executed.",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    // Example of adding a route listener and the function callback below.\n    Router.add('/games/{gameName}/:level:/', this.onRouteHandler, this);\n\n    // The above route listener would match the below url:\n    // www.site.com/#/games/asteroids/2/\n\n    // The Call back receives a RouterEvent object.\n    ClassName.prototype.onRouteHandler = function (routerEvent) {\n        console.log(routerEvent.params);\n    }\n\nRoute Pattern Options:\n----------------------\n**:optional:** The two colons **::** means a part of the hash url is optional for the match. The text between can be anything you want it to be.\n\n    Router.add('/contact/:name:/', this.method, this);\n\n    // Will match one of the following:\n    // www.site.com/#/contact/\n    // www.site.com/#/contact/heather/\n    // www.site.com/#/contact/john/\n\n\n**{required}** The two curly brackets **{}** means a part of the hash url is required for the match. The text between can be anything you want it to be.\n\n    Router.add('/product/{productName}/', this.method, this);\n\n    // Will match one of the following:\n    // www.site.com/#/product/shoes/\n    // www.site.com/#/product/jackets/\n\n\n**\\*** The asterisk character means it will match all or part of part the hash url.\n\n    Router.add('*', this.method, this);\n\n    // Will match one of the following:\n    // www.site.com/#/anything/\n    // www.site.com/#/matches/any/hash/url/\n    // www.site.com/#/really/it/matches/any/and/all/hash/urls/\n\n\n**?** The question mark character means it will match a query string for the hash url.\n\n    Router.add('?', this.method, this);\n\n    // Will match one of the following:\n    // www.site.com/#/?one=1&two=2&three=3\n    // www.site.com/#?one=1&two=2&three=3\n\n\n**''** The empty string means it will match when there are no hash url.\n\n    Router.add('', this.method, this);\n    Router.add('/', this.method, this);\n\n    // Will match one of the following:\n    // www.site.com/\n    // www.site.com/#/\n\n\nOther possible combinations but not limited too:\n\n    Router.add('/games/{gameName}/:level:/', this.method1, this);\n    Router.add('/{category}/blog/', this.method2, this);\n    Router.add('/home/?', this.method3, this);\n    Router.add('/about/*', this.method4, this);\n"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 112,
            "description": "The **Router.remove** method will remove one of the added routes.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "routePattern",
                    "description": "Must be the same string pattern you pasted into the {{#crossLink \"Router/add:method\"}}{{/crossLink}} method.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Must be the same function you pasted into the {{#crossLink \"Router/add:method\"}}{{/crossLink}} method.",
                    "type": "Function"
                },
                {
                    "name": "callbackScope",
                    "description": "Must be the same scope off the callback pattern you pasted into the {{#crossLink \"Router/add:method\"}}{{/crossLink}} method.",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    // Example of adding a route listener.\n    Router.add('/games/{gameName}/:level:/', this.onRouteHandler, this);\n\n    // Example of removing the same added route listener above.\n    Router.remove('/games/{gameName}/:level:/', this.onRouteHandler, this);"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 138,
            "description": "The **Router.addDefault** method is meant to trigger a callback function if there are no route matches are found.",
            "itemtype": "method",
            "name": "addDefault",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "callbackScope",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    Router.addDefault(this.noRoutesFoundHandler, this);"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 152,
            "description": "The **Router.removeDefault** method will remove the default callback that was added by the **Router.addDefault** method.",
            "itemtype": "method",
            "name": "removeDefault",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    Router.removeDefault();"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 164,
            "description": "Gets the current hash url minus the # or #! symbol(s).",
            "itemtype": "method",
            "name": "getHash",
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "Returns current hash url minus the # or #! symbol(s).",
                "type": "String"
            },
            "example": [
                "\n    var str = Router.getHash();"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 179,
            "description": "The **Router.enable** method will allow the Router class to listen for the hashchange event. By default the Router class is enabled.",
            "itemtype": "method",
            "name": "enable",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    Router.enable();"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 200,
            "description": "The **Router.disable** method will stop the Router class from listening for the hashchange event.",
            "itemtype": "method",
            "name": "disable",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    Router.disable();"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 221,
            "description": "The **Router.start** method is meant to trigger or check the hash url on page load.\nEither you can call this method after you add all your routers or after all data is loaded.\nIt is recommend you only call this once per page or application instantiation.",
            "itemtype": "method",
            "name": "start",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    // Example of adding routes and calling the start method.\n    Router.add('/games/{gameName}/:level:/', this.method1, this);\n    Router.add('/{category}/blog/', this.method2, this);\n\n    Router.start();"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 239,
            "description": "The **Router.navigateTo** method allows you to change the hash url and to trigger a route\nthat matches the string value. The second parameter is **silent** and is **false** by\ndefault. This allows you to update the hash url without causing a route callback to be\nexecuted.",
            "itemtype": "method",
            "name": "navigateTo",
            "params": [
                {
                    "name": "route",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "silent",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "disableHistory",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    // This will update the hash url and trigger the matching route.\n    Router.navigateTo('/games/asteroids/2/');\n\n    // This will update the hash url but will not trigger the matching route.\n    Router.navigateTo('/games/asteroids/2/', true);\n\n    // This will not update the hash url but will trigger the matching route.\n    Router.navigateTo('/games/asteroids/2/', true, true);"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 297,
            "description": "The **Router.clear** will remove all route's and the default route from the Router class.",
            "itemtype": "method",
            "name": "clear",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    Router.clear();"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 311,
            "description": "The **Router.destroy** method will null out all references to other objects in the Router class.",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    Router.destroy();"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 326,
            "description": "This method will be called if the Window object dispatches a HashChangeEvent.\nThis method will not be called if the Router is disabled.",
            "itemtype": "method",
            "name": "onHashChange",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "HashChangeEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 343,
            "description": "The method is responsible for check if one of the routes matches the string value passed in.",
            "itemtype": "method",
            "name": "changeRoute",
            "params": [
                {
                    "name": "hash",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 409,
            "description": "A reference to the browser Window Object.",
            "itemtype": "property",
            "name": "_window",
            "type": "{Window}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 418,
            "description": "A list of the added Route objects.",
            "itemtype": "property",
            "name": "_routes",
            "type": "{Array<Route>}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 427,
            "description": "A reference to default route object.",
            "itemtype": "property",
            "name": "_defaultRoute",
            "type": "{Route}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 436,
            "description": "A reference to the hash change event that was sent from the Window Object.",
            "itemtype": "property",
            "name": "_hashChangeEvent",
            "type": "{any}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 445,
            "description": "Determines if the Router class is enabled or disabled.",
            "itemtype": "property",
            "name": "isEnabled",
            "type": "{boolean}",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    // Read only.\n    console.log(Router.isEnabled);"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 458,
            "description": "The **Router.useDeepLinking** property tells the Router class weather it should change the hash url or not.\nBy **default** this property is set to **true**. If you set the property to **false** and using the **Router.navigateTo**\nmethod the hash url will not change. This can be useful if you are making an application or game and you don't want the user\nto know how to jump to other sections directly. See the **Router.{{#crossLink \"Router/allowManualDeepLinking:property\"}}{{/crossLink}}** to fully change the Router class\nfrom relying on the hash url to an internal state controller.",
            "itemtype": "property",
            "name": "useDeepLinking",
            "type": "{boolean}",
            "default": "true",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    Router.useDeepLinking = true;"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 474,
            "description": "The **Router.allowManualDeepLinking** property tells the Router class weather it should check for route matches if the\nhash url changes in the browser. This property only works if the **Router. {{#crossLink \"Router/useDeepLinking:property\"}}{{/crossLink}}** is set to **false**.\nThis is useful if want to use your added routes but don't want any external forces trigger your routes.\n\nTypically what I do for games is during development/testing I allow the hash url to change the states so testers can jump\nto sections or levels easily but then when it is ready for production I set the property to **false** so users cannot jump\naround if they figure out the url schema.",
            "itemtype": "property",
            "name": "allowManualDeepLinking",
            "type": "{boolean}",
            "default": "true",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    Router.useDeepLinking = false;\n    Router.allowManualDeepLinking = false;"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 493,
            "description": "The **Router.forceSlash** property tells the Router class if the **Router.{{#crossLink \"Router/navigateTo:method\"}}{{/crossLink}}** method is called to\nmake sure the hash url has a forward slash after the **#** character like this **#/**.",
            "itemtype": "property",
            "name": "forceSlash",
            "type": "{boolean}",
            "default": "false",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    // To turn on forcing the forward slash\n    Router.forceSlash = true;\n\n    // If forceSlash is set to true it will change the url from #contact/bob/ to #/contact/bob/\n    // when using the navigateTo method."
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/controller/Router.js",
            "line": 510,
            "description": "The **Router.allowMultipleMatches** property tells the Router class if it should trigger one or all routes that match a route pattern.",
            "itemtype": "property",
            "name": "allowMultipleMatches",
            "type": "{boolean}",
            "default": "true",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    // Only allow the first route matched to be triggered.\n    Router.allowMultipleMatches = false;"
            ],
            "class": "Router",
            "module": "StructureJS",
            "submodule": "controller"
        },
        {
            "file": "js/display/CanvasElement.js",
            "line": 27,
            "overridden": "CanvasElement.create",
            "class": "DOMElement",
            "module": "StructureJS"
        },
        {
            "file": "js/display/CanvasElement.js",
            "line": 36,
            "overridden": "CanvasElement.enable",
            "class": "DOMElement",
            "module": "StructureJS"
        },
        {
            "file": "js/display/CanvasElement.js",
            "line": 55,
            "overridden": "CanvasElement.disable",
            "class": "DOMElement",
            "module": "StructureJS"
        },
        {
            "file": "js/display/CanvasElement.js",
            "line": 74,
            "overridden": "DOMElement.addChild",
            "class": "DOMElement",
            "module": "StructureJS"
        },
        {
            "file": "js/display/CanvasElement.js",
            "line": 94,
            "overridden": "DOMElement.addChildAt",
            "class": "DOMElement",
            "module": "StructureJS"
        },
        {
            "file": "js/display/CanvasElement.js",
            "line": 114,
            "overridden": "DOMElement.swapChildren",
            "class": "DOMElement",
            "module": "StructureJS"
        },
        {
            "file": "js/display/CanvasElement.js",
            "line": 124,
            "overridden": "DOMElement.getChildAt",
            "class": "DOMElement",
            "module": "StructureJS"
        },
        {
            "file": "js/display/CanvasElement.js",
            "line": 130,
            "overridden": "DOMElement.removeChild",
            "class": "DOMElement",
            "module": "StructureJS"
        },
        {
            "file": "js/display/CanvasElement.js",
            "line": 152,
            "overridden": "DOMElement.removeChildAt",
            "class": "DOMElement",
            "module": "StructureJS"
        },
        {
            "file": "js/display/CanvasElement.js",
            "line": 160,
            "overridden": "DOMElement.removeChildren",
            "class": "DOMElement",
            "module": "StructureJS"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 150,
            "description": "Tracks number of times an element's width has been checked\nin order to determine if the element has been added\nto the DOM.",
            "itemtype": "property",
            "name": "checkCount",
            "type": "{number}",
            "access": "public",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 160,
            "description": "A cached reference to the DOM Element",
            "itemtype": "property",
            "name": "element",
            "type": "{HTMLElement}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 169,
            "description": "A cached reference to the jQuery DOM element",
            "itemtype": "property",
            "name": "$element",
            "type": "{JQuery}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 178,
            "description": "If a jQuery object was passed into the constructor this will be set as true and\nthis class will not try to add the view to the DOM since it already exists.",
            "itemtype": "property",
            "name": "_isReference",
            "type": "{boolean}",
            "access": "protected",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 187,
            "description": "Holds onto the value passed into the constructor.",
            "itemtype": "property",
            "name": "_type",
            "type": "{string}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 196,
            "description": "Holds onto the value passed into the constructor.",
            "itemtype": "property",
            "name": "_params",
            "type": "{any}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 215,
            "description": "The create function is intended to provide a consistent place for the creation and adding\nof children to the view. It will automatically be called the first time that the view is added\nto another DisplayObjectContainer. It is critical that all subclasses call the super for this function in\ntheir overridden methods.\n\nThis method gets called once when the child view is added to another view. If the child view is removed\nand added to another view the create method will not be called again.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "type",
                    "description": "[string=div] The HTML tag you want to create or the id/class selector of the template or the pre-compiled path to a template."
                },
                {
                    "name": "params",
                    "description": "[any=null] Any data you would like to pass into the jQuery element or template that is being created."
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DOMElement"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n    // EXAMPLE 1: By default your view class will be a div element:\n    ClassName.prototype.create = function () {\n         _super.prototype.create.call(this);\n\n         this._childInstance = new DOMElement();\n         this.addChild(this._childInstance);\n    }\n\n    // EXAMPLE 2: But lets say you wanted the view to be a ul element:\n    ClassName.prototype.create = function () {\n         _super.prototype.create.call(this, 'ul');\n    }\n\n    // Then you could nest other elements inside this base view/element.\n    ClassName.prototype.create = function () {\n         _super.prototype.create.call(this, 'ul', {id: 'myId', 'class': 'myClass anotherClass'});\n\n         var li = new DOMElement('li', {text: 'Robert is cool'});\n         this.addChild(li);\n    }\n\n    // EXAMPLE 3: So that's cool but what if you wanted a block of html to be your view. Let's say you had the below\n    // inline Handlebar template in your html file.\n    <script id=\"todoTemplate\" type=\"text/template\">\n         <div id=\"htmlTemplate\" class=\"js-todo\">\n             <div id=\"input-wrapper\">\n                 <input type=\"text\" class=\"list-input\" placeholder=\"{{ data.text }}\">\n                 <input type=\"button\" class=\"list-item-submit\" value=\"Add\">\n             </div>\n         </div>\n    </script>\n\n    // You would just pass in the id or class selector of the template which in this case is \"#todoTemplate\".\n    // There is a second optional argument where you can pass data for the Handlebar template to use.\n    ClassName.prototype.create = function () {\n         _super.prototype.create.call(this, '#todoTemplate', { data: this.viewData });\n\n    }\n\n    // EXAMPLE 4: Let's say you wanted to use the Handlebar plugin within RequireJS. You can pass the template into create.\n    var HomeTemplate = require('hbs!templates/HomeTemplate');\n\n    ClassName.prototype.create = function () {\n         _super.prototype.create.call(this, HomeTemplate, {data: \"some data\"});\n\n    }\n\n    // EXAMPLE 5: Or maybe you're using grunt-contrib-handlebars, or similar, to precompile hbs templates\n    require('templates'); // templates.js\n\n    ClassName.prototype.create = function () {\n         _super.prototype.create.call(this, 'templates/HomeTemplate', {data: \"some data\"});\n\n    }"
            ],
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 310,
            "overridden": "DisplayObjectContainer.addChild",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "The DOMElement instance to add as a child of this object instance.",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DOMElement"
            },
            "chainable": 1,
            "example": [
                "\n    container.addChild(domElementInstance);"
            ],
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 339,
            "description": "Adds the sjsId to the DOM element so we can know what what Class object the HTMLElement belongs too.",
            "itemtype": "method",
            "name": "addClientSideId",
            "params": [
                {
                    "name": "child",
                    "description": "The DOMElement instance to add the sjsId too.",
                    "type": "DOMElement"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 365,
            "description": "Removes the sjsId and class type from the HTMLElement.",
            "itemtype": "method",
            "name": "removeClientSideId",
            "params": [
                {
                    "name": "child",
                    "description": "The DOMElement instance to add the sjsId too.",
                    "type": "DOMElement"
                }
            ],
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 390,
            "description": "Called when the child object is added to the DOM.\nThe method will call {{#crossLink \"DOMElement/layout:method\"}}{{/crossLink}} and dispatch the BaseEvent.ADDED_TO_STAGE event.",
            "itemtype": "method",
            "name": "onDomAdded",
            "access": "protected",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 414,
            "overridden": "DisplayObjectContainer.addChildAt",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 447,
            "overridden": "DisplayObjectContainer.swapChildren",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 457,
            "overridden": "DisplayObjectContainer.getChildAt",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 463,
            "description": "Returns a DOMElement object with the first found DOM element by the passed in selector.",
            "itemtype": "method",
            "name": "getChild",
            "params": [
                {
                    "name": "selector",
                    "description": "DOM id name, DOM class name or a DOM tag name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "access": "public",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 494,
            "description": "Gets all the HTML elements children of this object.",
            "itemtype": "method",
            "name": "getChildren",
            "params": [
                {
                    "name": "selector",
                    "description": "You can pass in any type of jQuery selector. If there is no selector passed in it will get all the children of this parent element.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a list of DOMElement's. It will grab all children HTML DOM elements of this object and will create a DOMElement for each DOM child.\nIf the 'data-sjs-id' property exists is on an HTML element a DOMElement will not be created for that element because it will be assumed it already exists as a DOMElement.",
                "type": "Array.<DOMElement>"
            },
            "access": "public",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 526,
            "description": "Removes the specified child object instance from the child list of the parent object instance.\nThe parent property of the removed child is set to null and the object is garbage collected if there are no other references\nto the child. The index positions of any objects above the child in the parent object are decreased by 1.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObjectContainer instance to remove.",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DOMElement"
            },
            "override": "",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 553,
            "description": "Removes the child display object instance that exists at the specified index.",
            "itemtype": "method",
            "name": "removeChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index position of the child object.",
                    "type": "Int"
                }
            ],
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 566,
            "description": "Removes all child object instances from the child list of the parent object instance.\nThe parent property of the removed children is set to null and the objects are garbage collected if no other\nreferences to the children exist.",
            "itemtype": "method",
            "name": "removeChildren",
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DOMElement"
            },
            "override": "",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 585,
            "overridden": "DisplayObjectContainer.destroy",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DOMElement.js",
            "line": 596,
            "description": "A way to instantiate view classes by found html selectors.\n\nExample: It will find all children elements of the {{#crossLink \"DOMElement/$element:property\"}}{{/crossLink}} property with the 'js-shareEmail' selector.\nIf any selectors are found the EmailShareComponent class will be instantiated and pass the found jQuery element into the contructor.",
            "itemtype": "method",
            "name": "createComponents",
            "params": [
                {
                    "name": "componentList",
                    "description": "(Array.<>",
                    "type": "Selector: string; component: DOMElement"
                }
            ],
            "return": {
                "description": "Returns all the items created from this createComponents method.",
                "type": "Array.<DOMElement>"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n     ClassName.prototype.create = function () {\n         _super.prototype.create.call(this);\n\n         this.createComponents([\n             {selector: '.js-shareEmail', component: EmailShareComponent},\n             {selector: '.js-pagination', component: PaginationComponent},\n             {selector: '.js-carousel', component: CarouselComponent}\n         ]);\n     };"
            ],
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 31,
            "description": "The Stage of the display object.",
            "itemtype": "property",
            "name": "stage",
            "type": "{any}",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 39,
            "description": "The CanvasRenderingContext2D interface provides the 2D rendering context for the drawing surface of a canvas element.\nThis property is only used with the canvas specific display objects.",
            "itemtype": "property",
            "name": "ctx",
            "type": "{CanvasRenderingContext2D}",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 48,
            "description": "A property providing access to the x position.",
            "itemtype": "property",
            "name": "x",
            "type": "{number}",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 57,
            "description": "A property providing access to the y position.",
            "itemtype": "property",
            "name": "y",
            "type": "{number}",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 66,
            "description": "Indicates the width of the display object, in pixels.",
            "itemtype": "property",
            "name": "width",
            "type": "{number}",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 75,
            "description": "Indicates the height of the display object, in pixels.",
            "itemtype": "property",
            "name": "height",
            "type": "{number}",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 84,
            "description": "A property providing access to the unscaledWidth.",
            "itemtype": "property",
            "name": "unscaledWidth",
            "type": "{number}",
            "default": "100",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 93,
            "description": "A property providing access to the unscaledHeight.",
            "itemtype": "property",
            "name": "unscaledHeight",
            "type": "{number}",
            "default": "100",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 102,
            "description": "Indicates the horizontal scale (percentage) of the object as applied from the registration point.",
            "itemtype": "property",
            "name": "scaleX",
            "type": "{number}",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 110,
            "description": "Indicates the vertical scale (percentage) of an object as applied from the registration point of the object.",
            "itemtype": "property",
            "name": "scaleY",
            "type": "{number}",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 118,
            "description": "Indicates the rotation of the DisplayObject instance, in degrees, from its original orientation.",
            "itemtype": "property",
            "name": "rotation",
            "type": "{number}",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 126,
            "description": "Indicates the alpha transparency value of the object specified.",
            "itemtype": "property",
            "name": "alpha",
            "type": "{number}",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 134,
            "description": "Whether or not the display object is visible.",
            "itemtype": "property",
            "name": "visible",
            "type": "{boolean}",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 142,
            "description": "Specifies whether this object receives mouse",
            "itemtype": "property",
            "name": "mouseEnabled",
            "type": "{boolean}",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 150,
            "description": "A Boolean value that indicates whether the pointing hand (hand cursor) appears when the pointer rolls over a display object.",
            "itemtype": "property",
            "name": "useHandCursor",
            "type": "{boolean}",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 158,
            "description": "The isCreated property is used to keep track if it is the first time this DisplayObject is created.",
            "itemtype": "property",
            "name": "isCreated",
            "type": "{boolean}",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 167,
            "description": "Indicates the instance name of the DisplayObject.",
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 176,
            "description": "The create function is intended to provide a consistent place for the creation or initializing the view.\nIt will automatically be called the first time that the view is added to a DisplayObjectContainer.\nIt is critical that all subclasses call the super for this function in their overridden methods.",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObject"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 190,
            "description": "The layout method provides a common function to handle updating objects in the view.",
            "itemtype": "method",
            "name": "layout",
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObject"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObject.js",
            "line": 201,
            "description": "The setSize method sets the bounds within which the containing DisplayObject would like that component to lay itself out.",
            "params": [
                {
                    "name": "unscaledWidth",
                    "description": "The width within which the component should lay itself out.",
                    "type": "Number"
                },
                {
                    "name": "unscaledHeight",
                    "description": "The height within which the component should lay itself out.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObject"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObject",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 31,
            "description": "Returns the number of children of this object.",
            "itemtype": "property",
            "name": "numChildren",
            "type": "{int}",
            "default": "0",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 41,
            "description": "A reference to the child DisplayObject instances to this parent object instance.",
            "itemtype": "property",
            "name": "children",
            "type": "{Array.<DisplayObject>}",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 50,
            "description": "Determines whether or not the children of the object are mouse enabled.",
            "itemtype": "property",
            "name": "mouseChildren",
            "type": "{boolean}",
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 59,
            "description": "Adds a child DisplayObject instance to this parent object instance. The child is added to the front (top) of all other\nchildren in this parent object instance. (To add a child to a specific index position, use the addChildAt() method.)\n\nIf you add a child object that already has a different parent, the object is removed from the child\nlist of the other parent object.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObject instance to add as a child of this DisplayObjectContainer instance.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 82,
            "description": "Adds a child DisplayObject instance to this DisplayObjectContainerContainer instance.\nThe child is added at the index position specified. An index of 0 represents the back\n(bottom) of the display list for this DisplayObjectContainerContainer object.",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObject instance to add as a child of this object instance.",
                    "type": "DisplayObject"
                },
                {
                    "name": "index",
                    "description": "The index position to which the child is added. If you specify a currently occupied index position, the child object that exists at that position and all higher positions are moved up one position in the child list.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 104,
            "description": "Removes the specified child object instance from the child list of the parent object instance.\nThe parent property of the removed child is set to null , and the object is garbage collected if no other references\nto the child exist. The index positions of any objects above the child in the parent object are decreased by 1.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObject instance to remove.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 125,
            "description": "Removes all child DisplayObject instances from the child list of the DisplayObjectContainerContainer instance.\nThe parent property of the removed children is set to null , and the objects are garbage collected if\nno other references to the children exist.",
            "itemtype": "method",
            "name": "removeChildren",
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 141,
            "description": "Swaps two DisplayObject's with each other.",
            "itemtype": "method",
            "name": "swapChildren",
            "params": [
                {
                    "name": "child1",
                    "description": "The DisplayObject instance to be swap.",
                    "type": "DisplayObject"
                },
                {
                    "name": "child2",
                    "description": "The DisplayObject instance to be swap.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 157,
            "description": "Swaps child objects at the two specified index positions in the child list. All other child objects in the display object container remain in the same index positions.",
            "itemtype": "method",
            "name": "swapChildrenAt",
            "params": [
                {
                    "name": "index1",
                    "description": "The index position of the first child object.",
                    "type": "Int"
                },
                {
                    "name": "index2",
                    "description": "The index position of the second child object.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 176,
            "description": "Returns the index position of a child DisplayObject instance.",
            "itemtype": "method",
            "name": "getChildIndex",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObject instance to identify.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "The index position of the child display object to identify.",
                "type": "Int"
            },
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 187,
            "description": "Determines whether the specified display object is a child of the DisplayObject instance or the instance itself. The search includes the entire display list including this DisplayObject instance.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "child",
                    "description": "The child object to test.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "true if the child object is a child of the DisplayObject or the container itself; otherwise false.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 198,
            "description": "Returns the child display object instance that exists at the specified index.",
            "itemtype": "method",
            "name": "getChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index position of the child object.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "The child display object at the specified index position.",
                "type": "DisplayObject"
            },
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/DisplayObjectContainer.js",
            "line": 208,
            "description": "Gets a DisplayObject by its sjsId.",
            "itemtype": "method",
            "name": "getChildByCid",
            "params": [
                {
                    "name": "sjsId",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "DisplayObject|null"
            },
            "override": "",
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/display/Stage.js",
            "line": 95,
            "description": "The selected HTML element where the child elements will be created. This method starts the lifecycle of the application.",
            "itemtype": "method",
            "name": "appendTo",
            "params": [
                {
                    "name": "type",
                    "description": "A string value where your application will be appended. This can be an element id (#some-id), element class (.some-class) or a element tag (body).",
                    "type": "Any"
                },
                {
                    "name": "enabled",
                    "description": "Sets the enabled state of the object.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "chainable": 1,
            "class": "Stage",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "js/event/native/MouseEvents.js",
            "line": 12,
            "description": "The event occurs when the user clicks on an element.",
            "itemtype": "property",
            "name": "CLICK",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS"
        },
        {
            "file": "js/event/native/MouseEvents.js",
            "line": 20,
            "description": "The event occurs when the user double-clicks on an element.",
            "itemtype": "property",
            "name": "DBL_CLICK",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS"
        },
        {
            "file": "js/event/native/MouseEvents.js",
            "line": 28,
            "description": "The event occurs when a user presses a mouse button over an element.",
            "itemtype": "property",
            "name": "MOUSE_DOWN",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS"
        },
        {
            "file": "js/event/native/MouseEvents.js",
            "line": 36,
            "description": "The event occurs when the pointer is moving while it is over an element.",
            "itemtype": "property",
            "name": "MOUSE_MOVE",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS"
        },
        {
            "file": "js/event/native/MouseEvents.js",
            "line": 44,
            "description": "The event occurs when the pointer is moved onto an element.",
            "itemtype": "property",
            "name": "MOUSE_OVER",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS"
        },
        {
            "file": "js/event/native/MouseEvents.js",
            "line": 52,
            "description": "The event occurs when a user moves the mouse pointer out of an element.",
            "itemtype": "property",
            "name": "MOUSE_OUT",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS"
        },
        {
            "file": "js/event/native/MouseEvents.js",
            "line": 60,
            "description": "The event occurs when a user releases a mouse button over an element",
            "itemtype": "property",
            "name": "MOUSE_UP",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS"
        },
        {
            "file": "js/event/native/MouseEvents.js",
            "line": 68,
            "itemtype": "property",
            "name": "TAP",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS"
        },
        {
            "file": "js/event/native/NavigatorEvents.js",
            "line": 12,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "event",
            "name": "ONLINE",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS"
        },
        {
            "file": "js/event/native/NavigatorEvents.js",
            "line": 20,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "event",
            "name": "OFFLINE",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS"
        },
        {
            "file": "js/event/native/WindowEvents.js",
            "line": 12,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "property",
            "name": "CHANGE",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS"
        },
        {
            "file": "js/event/ApplicationCacheEvent.js",
            "line": 41,
            "description": "The browser is checking for an update, or is attempting to download\nthe cache manifest for the first time. This is always the first event\nin the sequence.",
            "itemtype": "event",
            "name": "CHECKING",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/ApplicationCacheEvent.js",
            "line": 51,
            "description": "The cache manifest hadn't changed.",
            "itemtype": "event",
            "name": "NO_UPDATE",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/ApplicationCacheEvent.js",
            "line": 59,
            "description": "The browser has started to download the cache manifest, either for the\nfirst time or because changes have been detected.",
            "itemtype": "event",
            "name": "DOWNLOADING",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/ApplicationCacheEvent.js",
            "line": 68,
            "description": "The browser had downloaded and cached an asset. This is fired once for\nevery file that is downloaded (including the current page which is cached implicitly).",
            "itemtype": "event",
            "name": "PROGRESS",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/ApplicationCacheEvent.js",
            "line": 77,
            "description": "The resources listed in the manifest have been fully downloaded, and the application is\nnow cached locally.",
            "itemtype": "event",
            "name": "CACHED",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/ApplicationCacheEvent.js",
            "line": 86,
            "description": "The resources listed in the manifest have been newly re-downloaded, and the script can\nuse swapCache() to switch to the new cache.",
            "itemtype": "event",
            "name": "UPDATE_READY",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/ApplicationCacheEvent.js",
            "line": 95,
            "description": "The cache manifest file could not be found, indicating that the cache is no longer needed.\nThe application cache is being deleted.",
            "itemtype": "event",
            "name": "OBSOLETE",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/ApplicationCacheEvent.js",
            "line": 104,
            "description": "An error occurred at some point - this could be caused by a number of things. This will\nalways be the last event in the sequence.",
            "itemtype": "event",
            "name": "ERROR",
            "type": "{string}",
            "static": 1,
            "class": "ApplicationCacheEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 68,
            "description": "The type of event.",
            "itemtype": "property",
            "name": "type",
            "type": "{string}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 78,
            "description": "A reference to the object that originally dispatched the event.",
            "itemtype": "property",
            "name": "target",
            "type": "{any}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 88,
            "description": "The currentTarget property always points to the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that the event is currently processing (i.e. bubbling at).",
            "itemtype": "property",
            "name": "currentTarget",
            "type": "{any}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 98,
            "description": "Used to pass any type of data with the event.",
            "itemtype": "property",
            "name": "data",
            "type": "{any}",
            "access": "public",
            "tagname": "",
            "default": "null",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 107,
            "description": "Indicates whether an event is a bubbling event.",
            "itemtype": "property",
            "name": "bubbles",
            "type": "{boolean}",
            "access": "public",
            "tagname": "",
            "default": "false",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 116,
            "description": "Indicates whether the behavior associated with the event can be prevented.",
            "itemtype": "property",
            "name": "cancelable",
            "type": "{boolean}",
            "access": "public",
            "tagname": "",
            "default": "false",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 125,
            "description": "Indicates if the {{#crossLink \"BaseEvent/stopPropagation:method\"}}{{/crossLink}} was called on the event object.",
            "itemtype": "property",
            "name": "isPropagationStopped",
            "type": "{boolean}",
            "default": "false",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 135,
            "description": "Indicates if the {{#crossLink \"BaseEvent/stopImmediatePropagation:method\"}}{{/crossLink}} was called on the event object.",
            "itemtype": "property",
            "name": "isImmediatePropagationStopped",
            "type": "{boolean}",
            "default": "false",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 150,
            "description": "Prevents processing of any event listeners in nodes subsequent to the current node in the event flow.\nThis method does not affect any event listeners in the current node (currentTarget). In contrast,\nthe {{#crossLink \"BaseEvent/stopImmediatePropagation:method\"}}{{/crossLink}} method prevents processing\nof event listeners in both the current node and subsequent nodes. Additional calls to this method have no effect.",
            "itemtype": "method",
            "name": "stopPropagation",
            "access": "public",
            "tagname": "",
            "example": [
                "\n    event.stopPropagation();"
            ],
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 164,
            "description": "Prevents processing of any event listeners in the current node and any subsequent nodes in the event flow.\nThis method takes effect immediately, and it affects event listeners in the current node. In contrast,\nthe {{#crossLink \"BaseEvent/stopPropagation:method\"}}{{/crossLink}} method doesn't take effect until\nall the event listeners in the current node finish processing.",
            "itemtype": "method",
            "name": "stopImmediatePropagation",
            "access": "public",
            "tagname": "",
            "example": [
                "\n    event.stopImmediatePropagation();"
            ],
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 179,
            "description": "Duplicates an instance of an BaseEvent subclass.\n\nReturns a new BaseEvent object that is a copy of the original instance of the BaseEvent object.\n\nThe new BaseEvent object includes all the properties of the original.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "BaseEvent"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n    var cloneOfEvent = event.clone();"
            ],
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 201,
            "description": "The BaseEvent.ACTIVATE constant defines the value of the type property of an activate event object.",
            "itemtype": "event",
            "name": "ACTIVATE",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 210,
            "description": "The BaseEvent.ADDED constant defines the value of the type property of an added event object.",
            "itemtype": "event",
            "name": "ADDED",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 219,
            "description": "The BaseEvent.ADDED_TO_STAGE constant defines the value of the type property of an addedToStage event object.",
            "itemtype": "event",
            "name": "ADDED_TO_STAGE",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 228,
            "description": "The BaseEvent.CANCEL constant defines the value of the type property of a cancel event object.",
            "itemtype": "event",
            "name": "CANCEL",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 237,
            "description": "The BaseEvent.CHANGE constant defines the value of the type property of a change event object.",
            "itemtype": "event",
            "name": "CHANGE",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 246,
            "description": "The BaseEvent.CLEAR constant defines the value of the type property of a clear event object.",
            "itemtype": "event",
            "name": "CLEAR",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 255,
            "description": "The BaseEvent.CLOSE constant defines the value of the type property of a close event object.",
            "itemtype": "event",
            "name": "CLOSE",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 264,
            "description": "The BaseEvent.CLOSING constant defines the value of the type property of a closing event object.",
            "itemtype": "event",
            "name": "CLOSING",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 273,
            "description": "The BaseEvent.COMPLETE constant defines the value of the type property of a complete event object.",
            "itemtype": "event",
            "name": "COMPLETE",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 282,
            "description": "The BaseEvent.CONNECT constant defines the value of the type property of a connect event object.",
            "itemtype": "event",
            "name": "CONNECT",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 291,
            "description": "Defines the value of the type property of a copy event object.",
            "itemtype": "event",
            "name": "COPY",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 300,
            "description": "Defines the value of the type property of a cut event object.",
            "itemtype": "event",
            "name": "CUT",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 309,
            "description": "The BaseEvent.DEACTIVATE constant defines the value of the type property of a deactivate event object.",
            "itemtype": "event",
            "name": "DEACTIVATE",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 318,
            "description": "The BaseEvent.DISPLAYING constant defines the value of the type property of a displaying event object.",
            "itemtype": "event",
            "name": "DISPLAYING",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 327,
            "description": "The BaseEvent.ENTER_FRAME constant defines the value of the type property of an enterFrame event object.",
            "itemtype": "event",
            "name": "ENTER_FRAME",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 336,
            "description": "The BaseEvent.EXIT_FRAME constant defines the value of the type property of an exitFrame event object.",
            "itemtype": "event",
            "name": "EXIT_FRAME",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 345,
            "description": "The BaseEvent.EXITING constant defines the value of the type property of an exiting event object.",
            "itemtype": "event",
            "name": "EXITING",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 354,
            "description": "The BaseEvent.FULL_SCREEN constant defines the value of the type property of a fullScreen event object.",
            "itemtype": "event",
            "name": "FULLSCREEN",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 363,
            "description": "The BaseEvent.INIT constant defines the value of the type property of an init event object.",
            "itemtype": "event",
            "name": "INIT",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 372,
            "description": "The BaseEvent.NETWORK_CHANGE constant defines the value of the type property of a networkChange event object.",
            "itemtype": "event",
            "name": "NETWORK_CHANGE",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 381,
            "description": "The BaseEvent.OPEN constant defines the value of the type property of an open event object.",
            "itemtype": "event",
            "name": "OPEN",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 390,
            "description": "The BaseEvent.PASTE constant defines the value of the type property of a paste event object.",
            "itemtype": "event",
            "name": "PASTE",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 399,
            "description": "The BaseEvent.PREPARING constant defines the value of the type property of a preparing event object.",
            "itemtype": "event",
            "name": "PREPARING",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 408,
            "description": "The BaseEvent.REMOVED constant defines the value of the type property of a removed event object.",
            "itemtype": "event",
            "name": "REMOVED",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 417,
            "description": "The BaseEvent.RENDER constant defines the value of the type property of a render event object.",
            "itemtype": "event",
            "name": "RENDER",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 426,
            "description": "The BaseEvent.RESIZE constant defines the value of the type property of a resize event object.",
            "itemtype": "event",
            "name": "RESIZE",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BaseEvent.js",
            "line": 435,
            "description": "The BaseEvent.SELECTED constant defines the value of the type property of a selected event object.",
            "itemtype": "event",
            "name": "SELECTED",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BulkLoaderEvent.js",
            "line": 40,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "property",
            "name": "total",
            "type": "{number}",
            "access": "public",
            "tagname": "",
            "class": "BulkLoaderEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BulkLoaderEvent.js",
            "line": 48,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "property",
            "name": "totalComplete",
            "type": "{number}",
            "access": "public",
            "tagname": "",
            "class": "BulkLoaderEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BulkLoaderEvent.js",
            "line": 56,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "property",
            "name": "percentComplete",
            "type": "{number}",
            "access": "public",
            "tagname": "",
            "class": "BulkLoaderEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BulkLoaderEvent.js",
            "line": 65,
            "description": "The BulkLoaderEvent.COMPLETE constant defines the value of the type property of an loader event object.",
            "itemtype": "event",
            "name": "COMPLETE",
            "type": "{string}",
            "static": 1,
            "class": "BulkLoaderEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BulkLoaderEvent.js",
            "line": 73,
            "description": "The BulkLoaderEvent.LOAD_COMPLETE constant defines the value of the type property of an loader event object.",
            "itemtype": "event",
            "name": "LOAD_COMPLETE",
            "type": "{string}",
            "static": 1,
            "class": "BulkLoaderEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/BulkLoaderEvent.js",
            "line": 81,
            "description": "The BulkLoaderEvent.ERROR constant defines the value of the type property of an loader event object.",
            "itemtype": "event",
            "name": "ERROR",
            "type": "{string}",
            "static": 1,
            "class": "BulkLoaderEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventBroker.js",
            "line": 27,
            "description": "Registers an event listener object with an EventBroker object so that the listener receives notification of an event.",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener function that processes the event. The callback function will receive a {{#crossLink \"BaseEvent\"}}{{/crossLink}} object or custom event that extends the {{#crossLink \"BaseEvent\"}}{{/crossLink}} class.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope of the callback function.",
                    "type": "Any"
                },
                {
                    "name": "priority",
                    "description": "Influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "example": [
                "\n    EventBroker.addEventListener('change', this._handlerMethod, this);\n    // Example of using a constant event type.\n    EventBroker.addEventListener(BaseEvent.CHANGE, this._handlerMethod, this);\n\n    // The event passed to the method will always be a BaseEvent object.\n    ClassName.prototype._handlerMethod = function (event) {\n         console.log(event.data);\n    };"
            ],
            "class": "EventBroker",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventBroker.js",
            "line": 51,
            "description": "Registers an event listener object once with an EventDispatcher object so the listener will receive the notification of an event.",
            "itemtype": "method",
            "name": "addEventListenerOnce",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener function that processes the event. The callback function will receive a {{#crossLink \"BaseEvent\"}}{{/crossLink}} object or custom event that extends the {{#crossLink \"BaseEvent\"}}{{/crossLink}} class.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope of the callback function.",
                    "type": "Any"
                },
                {
                    "name": "priority",
                    "description": "Influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "example": [
                "\n    EventBroker.addEventListenerOnce('change', this._handlerMethod, this);\n    // Example of using a constant event type.\n    EventBroker.addEventListenerOnce(BaseEvent.CHANGE, this._handlerMethod, this);\n\n    // The event passed to the method will always be a BaseEvent object.\n    ClassName.prototype._handlerMethod = function (event) {\n         console.log(event.data);\n    };"
            ],
            "class": "EventBroker",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventBroker.js",
            "line": 75,
            "description": "Removes a specified listener from the EventBroker object.",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function to be removed.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope of the callback function to be removed.",
                    "type": "Any"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "example": [
                "\n    EventBroker.removeEventListener('change', this._handlerMethod, this);\n\n    EventBroker.removeEventListener(BaseEvent.CHANGE, this._handlerMethod, this);"
            ],
            "class": "EventBroker",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventBroker.js",
            "line": 92,
            "description": "Dispatches an event within the EventBroker object.",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The Event object or event type string you want to dispatch.",
                    "type": "String|BaseEvent"
                },
                {
                    "name": "data",
                    "description": "The optional data you want to send with the event. Do not use this parameter if you are passing in a {{#crossLink \"BaseEvent\"}}{{/crossLink}}.",
                    "type": "Any",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "example": [
                "\n     EventBroker.dispatchEvent('change');\n\n     // Example: Sending data with the event.\n     EventBroker.dispatchEvent('change', {some: 'data'});\n\n     // Example: Sending a BaseEvent or custom event object.\n     var event = new BaseEvent(BaseEvent.CHANGE);\n     event.data = {some: 'data'};\n     EventBroker.dispatchEvent(event);"
            ],
            "class": "EventBroker",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventBroker.js",
            "line": 121,
            "description": "Check if EventBroker has a specific event listener already added.",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener method to call.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope of the listener object.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "access": "public",
            "tagname": "",
            "example": [
                "\n     EventBroker.hasEventListener(BaseEvent.CHANGE, this._handlerMethod, this);"
            ],
            "class": "EventBroker",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventBroker.js",
            "line": 137,
            "description": "Generates a string output of event listeners for a given object.",
            "itemtype": "method",
            "name": "getEventListeners",
            "return": {
                "description": "",
                "type": "String"
            },
            "static": 1,
            "access": "public",
            "tagname": "",
            "example": [
                "\n     EventBroker.getEventListeners();\n\n     // [ClassName] is listen for 'BaseEvent.change' event."
            ],
            "class": "EventBroker",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventBroker.js",
            "line": 152,
            "description": "A reference to the EventDispatcher object.",
            "itemtype": "property",
            "name": "_eventDispatcher",
            "type": "{EventDispatcher}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "EventBroker",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventDispatcher.js",
            "line": 42,
            "description": "Holds a reference to added listeners.",
            "itemtype": "property",
            "name": "_listeners",
            "type": "{Array.<any>}",
            "access": "protected",
            "tagname": "",
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventDispatcher.js",
            "line": 50,
            "description": "Indicates the object that contains a child object. Uses the parent property\nto specify a relative path to display objects that are above the current display object in the display\nlist hierarchy and helps facilitate event bubbling.",
            "itemtype": "property",
            "name": "parent",
            "type": "{any}",
            "access": "public",
            "tagname": "",
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventDispatcher.js",
            "line": 62,
            "description": "Registers an event listener object with an EventDispatcher object so the listener receives notification of an event.",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener function that processes the event. This function must accept an Event object as its only parameter and must return nothing, as this example shows. @example function(event:Event):void",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "Binds the scope to a particular object (scope is basically what \"this\" refers to in your function). This can be very useful in JavaScript because scope isn't generally maintained.",
                    "type": "Any"
                },
                {
                    "name": "priority",
                    "description": "Influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n     this.addEventListener(BaseEvent.CHANGE, this.handlerMethod, this);\n\n     ClassName.prototype.handlerMethod = function (event) {\n         console.log(event.target + \" sent the event.\");\n         console.log(event.type, event.data);\n     }"
            ],
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventDispatcher.js",
            "line": 105,
            "description": "Registers an event listener object once with an EventDispatcher object so the listener will receive the notification of an event.",
            "itemtype": "method",
            "name": "addEventListenerOnce",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener function that processes the event. This function must accept an Event object as its only parameter and must return nothing, as this example shows. @example function(event:Event):void",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "Binds the scope to a particular object (scope is basically what \"this\" refers to in your function). This can be very useful in JavaScript because scope isn't generally maintained.",
                    "type": "Any"
                },
                {
                    "name": "priority",
                    "description": "Influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n     this.addEventListenerOnce(BaseEvent.CHANGE, this.handlerMethod, this);\n\n     ClassName.prototype.handlerMethod = function (event) {\n         console.log(event.target + \" sent the event.\");\n         console.log(event.type, event.data);\n     }"
            ],
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventDispatcher.js",
            "line": 134,
            "description": "Removes a specified listener from the EventDispatcher object.",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener object to remove.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope of the listener object to be removed.",
                    "type": "Any"
                }
            ],
            "hide": "This was added because it was needed for the {{#crossLink \"EventBroker\"}}{{/crossLink}} class. To keep things consistent this parameter is required.",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n     this.removeEventListener(BaseEvent.CHANGE, this._handlerMethod, this);\n\n     ClassName.prototype._handlerMethod = function (event) {\n     };"
            ],
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventDispatcher.js",
            "line": 165,
            "description": "<p>Dispatches an event into the event flow. The event target is the EventDispatcher object upon which the dispatchEvent() method is called.</p>",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The Event object or event type string you want to dispatch. You can create custom events, the only requirement is all events must extend {{#crossLink \"BaseEvent\"}}{{/crossLink}}.",
                    "type": "String|BaseEvent"
                },
                {
                    "name": "data",
                    "description": "The optional data you want to send with the event. Do not use this parameter if you are passing in a {{#crossLink \"BaseEvent\"}}{{/crossLink}}.",
                    "type": "Any",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n     this.dispatchEvent('change');\n\n     // Example: Sending data with the event:\n     this.dispatchEvent('change', {some: 'data'});\n\n     // Example: With an event object\n     // (event type, bubbling set to true, cancelable set to true and passing data) :\n     var event = new BaseEvent(BaseEvent.CHANGE, true, true, {some: 'data'});\n     this.dispatchEvent(event);\n\n     // Here is a common inline event object being dispatched:\n     this.dispatchEvent(new BaseEvent(BaseEvent.CHANGE));"
            ],
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventDispatcher.js",
            "line": 229,
            "description": "Check if an object has a specific event listener already added.",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener method to call.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope of the listener object.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n     this.hasEventListener(BaseEvent.CHANGE, this.handlerMethod, this);"
            ],
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventDispatcher.js",
            "line": 254,
            "description": "Generates a string output of event listeners for a given object.",
            "itemtype": "method",
            "name": "getEventListeners",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n     this.getEventListeners();\n\n     // [ClassName] is listening for the 'BaseEvent.change' event."
            ],
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/EventDispatcher.js",
            "line": 284,
            "overridden": "BaseObject.destroy",
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/LoaderEvent.js",
            "line": 41,
            "description": "The LoaderEvent.COMPLETE constant defines the value of the type property of an loader event object.",
            "itemtype": "event",
            "name": "COMPLETE",
            "type": "{string}",
            "static": 1,
            "class": "LoaderEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/LoaderEvent.js",
            "line": 49,
            "description": "The LoaderEvent.LOAD_COMPLETE constant defines the value of the type property of an loader event object.",
            "itemtype": "event",
            "name": "LOAD_COMPLETE",
            "type": "{string}",
            "static": 1,
            "class": "LoaderEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/LoaderEvent.js",
            "line": 57,
            "description": "The LoaderEvent.ERROR constant defines the value of the type property of an loader event object.",
            "itemtype": "event",
            "name": "ERROR",
            "type": "{string}",
            "static": 1,
            "class": "LoaderEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/LocalStorageEvent.js",
            "line": 38,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "property",
            "name": "originalEvent",
            "type": "{any}",
            "access": "public",
            "tagname": "",
            "class": "LocalStorageEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/LocalStorageEvent.js",
            "line": 54,
            "description": "The storage event is fired on a Document's Window object when a storage area changes.",
            "itemtype": "event",
            "name": "STORAGE",
            "type": "{string}",
            "static": 1,
            "class": "LocalStorageEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/NetworkMonitorEvent.js",
            "line": 42,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "property",
            "name": "status",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "class": "NetworkMonitorEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/NetworkMonitorEvent.js",
            "line": 50,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "property",
            "name": "connected",
            "type": "{boolean}",
            "access": "public",
            "tagname": "",
            "class": "NetworkMonitorEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/NetworkMonitorEvent.js",
            "line": 61,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "event",
            "name": "STATUS",
            "type": "{string}",
            "static": 1,
            "class": "NetworkMonitorEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/NetworkMonitorEvent.js",
            "line": 69,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "event",
            "name": "ONLINE",
            "type": "{string}",
            "static": 1,
            "class": "NetworkMonitorEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/NetworkMonitorEvent.js",
            "line": 77,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "event",
            "name": "OFFLINE",
            "type": "{string}",
            "static": 1,
            "class": "NetworkMonitorEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/RouterEvent.js",
            "line": 41,
            "description": "The route that was matched against {{#crossLink \"RouterEvent/routePattern:property\"}}{{/crossLink}} property.",
            "itemtype": "property",
            "name": "route",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "class": "RouterEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/RouterEvent.js",
            "line": 49,
            "description": "The new URL to which the window is navigating.",
            "itemtype": "property",
            "name": "newURL",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "class": "RouterEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/RouterEvent.js",
            "line": 57,
            "description": "The previous URL from which the window was navigated.",
            "itemtype": "property",
            "name": "oldURL",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "class": "RouterEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/RouterEvent.js",
            "line": 65,
            "description": "The route pattern that matched the {{#crossLink \"RouterEvent/route:property\"}}{{/crossLink}} property.",
            "itemtype": "property",
            "name": "routePattern",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "class": "RouterEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/RouterEvent.js",
            "line": 73,
            "description": "An array containing the parameters captured from the Route.{{#crossLink \"Route/match:method\"}}{{/crossLink}}\nbeing called with the {{#crossLink \"RouterEvent/routePattern:property\"}}{{/crossLink}} property.",
            "itemtype": "property",
            "name": "params",
            "type": "{Array.<string>}",
            "access": "public",
            "tagname": "",
            "class": "RouterEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/RouterEvent.js",
            "line": 82,
            "description": "A query object the represents the query string in the hash url.",
            "itemtype": "property",
            "name": "query",
            "type": "{any}",
            "access": "public",
            "tagname": "",
            "class": "RouterEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/RouterEvent.js",
            "line": 91,
            "description": "The RouterEvent.CHANGE constant defines the value of the type property of an change route event object.",
            "itemtype": "event",
            "name": "CHANGE",
            "type": "{string}",
            "static": 1,
            "class": "RouterEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/TimerEvent.js",
            "line": 41,
            "description": "Dispatched whenever a Timer object reaches an interval specified according to the Timer.delay property.",
            "itemtype": "event",
            "name": "TIMER",
            "type": "{string}",
            "static": 1,
            "class": "TimerEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/event/TimerEvent.js",
            "line": 49,
            "description": "Dispatched whenever it has completed the number of requests set by Timer.repeatCount.",
            "itemtype": "event",
            "name": "TIMER_COMPLETE",
            "type": "{string}",
            "static": 1,
            "class": "TimerEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "js/geom/Point.js",
            "line": 22,
            "description": "The horizontal coordinate of the point.",
            "itemtype": "property",
            "name": "x",
            "type": "{number}",
            "access": "public",
            "tagname": "",
            "class": "Point",
            "module": "StructureJS",
            "submodule": "geom"
        },
        {
            "file": "js/geom/Point.js",
            "line": 30,
            "description": "The vertical coordinate of the point.",
            "itemtype": "property",
            "name": "y",
            "type": "{number}",
            "access": "public",
            "tagname": "",
            "class": "Point",
            "module": "StructureJS",
            "submodule": "geom"
        },
        {
            "file": "js/model/BaseModel.js",
            "line": 88,
            "description": "Provide a way to update the  Base Model.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "example": [
                "\n    // Example of updating some of the data:\n    carModel.update({ year: 2015, allWheel: true});\n\n    // Of course you can also do it the following way:\n    carModel.year = 2015;\n    carModel.allWheel = false;"
            ],
            "class": "BaseModel",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/BaseModel.js",
            "line": 118,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "_setData",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BaseModel",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/BaseModel.js",
            "line": 143,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "_updateData",
            "params": [
                {
                    "name": "keyValue",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BaseModel",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/BaseModel.js",
            "line": 168,
            "description": "Converts the  Base Model data into a JSON object and deletes the sjsId property.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "",
                "type": "BaseModel"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n    var obj = carModel.toJSON();"
            ],
            "class": "BaseModel",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/BaseModel.js",
            "line": 181,
            "description": "Converts a  Base Model to a JSON string,",
            "itemtype": "method",
            "name": "toJSONString",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n    var str = carModel.toJSONString();"
            ],
            "class": "BaseModel",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/BaseModel.js",
            "line": 193,
            "description": "Converts the string json data into an Object and calls the {{#crossLink \"BaseModel/update:method\"}}{{/crossLink}} method with the converted Object.",
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "example": [
                "\n     var str = '{\"make\":\"Tesla\",\"model\":\"Model S\",\"year\":2014}'\n     var carModel = new CarModel();\n     carModel.fromJSON(str);"
            ],
            "class": "BaseModel",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/BaseModel.js",
            "line": 209,
            "description": "Create a clone/copy of the  Base Model.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "BaseModel"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n    var clone = carModel.clone();"
            ],
            "class": "BaseModel",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 46,
            "description": "The list of models in the collection.",
            "itemtype": "property",
            "name": "models",
            "type": "{Array.<any>}",
            "readonly": "",
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 54,
            "description": "The count of how many models are in the collection.",
            "itemtype": "property",
            "name": "length",
            "type": "{int}",
            "default": "0",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 64,
            "description": "A reference to a BaseModel type that will be used in the collection.",
            "itemtype": "property",
            "name": "_modelType",
            "type": "{any}",
            "access": "protected",
            "tagname": "",
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 74,
            "description": "Adds model or an array of models to the collection.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "model",
                    "description": "Single or an array of models to add to the current collection.",
                    "type": "Any|Array"
                },
                {
                    "name": "silent",
                    "description": "If you'd like to prevent the event from being dispatched.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n     collection.add(vo);\n     collection.add(vo, true);"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 111,
            "description": "Removes a model or an array of models from the collection.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "model",
                    "description": "Model(s) to remove",
                    "type": "Object|Array"
                },
                {
                    "name": "silent",
                    "description": "If you'd like to prevent the event from being dispatched.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n     collection.remove(vo);\n\n     collection.remove(vo, true);"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 140,
            "description": "Checks if a collection has an model.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "model",
                    "description": "Item to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n     collection.has(vo);"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 153,
            "description": "Returns the array index position of the  Base Model.",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "model",
                    "description": "get the index of.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n     collection.indexOf(vo);"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 166,
            "description": "Finds an object by an index value.\nIf the index is out of bounds, the collection will clamp it.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "The index integer of the model to get",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "model to find",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n     collection.get(1);"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 187,
            "description": "Examines each element in a collection, returning an array of all elements that have the given properties.\nWhen checking properties, this method performs a deep comparison between values to determine if they are equivalent to each other.",
            "itemtype": "method",
            "name": "findBy",
            "params": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "Object|Array"
                }
            ],
            "return": {
                "description": "Returns a list of found object's.",
                "type": "Array.<any>"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n     // Finds all  Base Model that has 'Robert' in it.\n     this._collection.findBy(\"Robert\");\n     // Finds any  Base Model that has 'Robert' or 'Heater' or 23 in it.\n     this._collection.findBy([\"Robert\", \"Heather\", 32]);\n\n     // Finds all  Base Models that same key and value you are searching for.\n     this._collection.findBy({ name: 'apple', organic: false, type: 'fruit' });\n     this._collection.findBy([{ type: 'vegetable' }, { name: 'apple', 'organic: false, type': 'fruit' }]);"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 225,
            "description": "Loops through the models array and creates a new array of models that match all the properties on the object passed in.",
            "itemtype": "method",
            "name": "_where",
            "params": [
                {
                    "name": "propList",
                    "description": "",
                    "type": "Object|Array"
                }
            ],
            "return": {
                "description": "Returns a list of found object's.",
                "type": "Array.<any>"
            },
            "access": "protected",
            "tagname": "",
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 268,
            "description": "Loops through all properties of an object and check to see if the value matches the argument passed in.",
            "itemtype": "method",
            "name": "_findPropertyValue",
            "params": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "String|Number|Boolean>"
                }
            ],
            "return": {
                "description": "Returns a list of found object's.",
                "type": "Array.<any>"
            },
            "access": "protected",
            "tagname": "",
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 307,
            "description": "Clears or remove all the models from the collection.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "silent",
                    "description": "If you'd like to prevent the event from being dispatched.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n     collection.clear();"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 326,
            "description": "Creates and returns a new collection object that contains a reference to the models in the collection cloned from.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "Collection"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n    var clone = collection.clone();"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 340,
            "description": "Creates a JSON object of the collection.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "",
                "type": "Array.<any>"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n    var arrayOfObjects = collection.toJSON();"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 362,
            "description": "Creates a JSON string of the collection.",
            "itemtype": "method",
            "name": "toJSONString",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n    var str = collection.toJSONString();"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 374,
            "description": "Converts the string json data into an Objects and calls the {{#crossLink \"Collection/add:method\"}}{{/crossLink}} method to add the objects to the collection.",
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n     collection.fromJSON(str);"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 389,
            "description": "Allows you to sort models that have one or more common properties, specifying the property or properties to use as the sort keys",
            "itemtype": "method",
            "name": "sortOn",
            "params": [
                {
                    "name": "propertyName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "sortAscending",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "access": "public",
            "tagname": "",
            "return": {
                "description": "Returns the list of models in the collection.",
                "type": "Array<any>"
            },
            "example": [
                "\n     collection.sortOn('name');\n     collection.sortOn('name', false);"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 426,
            "description": "Specifies a function that defines the sort order. If omitted, the array is sorted according to each character's Unicode code\npoint value, according to the string conversion of each element.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "sortFunction",
                    "description": "",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "access": "public",
            "tagname": "",
            "return": {
                "description": "Returns the list of models in the collection.",
                "type": "Array.<any>"
            },
            "example": [
                "\n     var sortByDate = function(a, b){\n         return new Date(a.date) - new Date(b.date)\n     }\n\n     collection.sort(sortByDate);"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 446,
            "description": "The filter method creates a new array with all elements that pass the test implemented by the provided function.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to test each element of the array. Invoked with arguments (element, index, array). Return true to keep the element, false otherwise.",
                    "type": "Function"
                },
                {
                    "name": "callbackScope",
                    "description": "Optional. Value to use as this when executing callback.",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "access": "public",
            "tagname": "",
            "return": {
                "description": "Returns the list of models in the collection.",
                "type": "Array.<any>"
            },
            "example": [
                "\n     var isOldEnough = function(model){\n         return model.age >= 21;\n     }\n\n     var list = collection.filter(isOldEnough);"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 465,
            "description": "Convenient way to get a list of property values.",
            "itemtype": "method",
            "name": "pluck",
            "params": [
                {
                    "name": "propertyName",
                    "description": "The property name you want the values from.",
                    "type": "String"
                },
                {
                    "name": "unique",
                    "description": "Pass in true to remove duplicates.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Array.<any>"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n     collection.add([{name: 'Robert'}, {name: 'Robert'}, {name: 'Chris'}]);\n\n     var list = collection.pluck('name');\n     // ['Robert', 'Robert', 'Chris']\n\n     var list = collection.pluck('name', true);\n     // ['Robert', 'Chris']"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 495,
            "description": "Convenient way to group models into categories/groups by a property name.",
            "itemtype": "method",
            "name": "groupBy",
            "params": [
                {
                    "name": "propertyName",
                    "description": "The string value of the property you want to group with.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns an object that is categorized by the property name.",
                "type": "Any"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n     collection.add([{name: 'Robert', id: 0}, {name: 'Robert', id: 1}, {name: 'Chris', id: 2}]);\n\n     var list = collection.groupBy('name');\n\n     // {\n     //    Robert: [{name: 'Robert', id: 0}, {name: 'Robert', id: 1}]\n     //    Chris: [{name: 'Chris', id: 2}]\n     // }"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 528,
            "description": "Changes the order of the models so that the last model becomes the first model, the penultimate model becomes the second, and so on.",
            "itemtype": "method",
            "name": "reverse",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "Returns the list of models in the collection.",
                "type": "Array.<any>"
            },
            "example": [
                "\n     collection.reverse();"
            ],
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Collection.js",
            "line": 540,
            "description": "Returns a new array of models with duplicates removed.",
            "itemtype": "method",
            "name": "_unique",
            "params": [
                {
                    "name": "list",
                    "description": "The array you want to use to generate the unique array.",
                    "type": "Array.<any>"
                }
            ],
            "return": {
                "description": "Returns a new array list of models in the collection with duplicates removed.",
                "type": "Array<any>"
            },
            "access": "protected",
            "tagname": "",
            "class": "Collection",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Route.js",
            "line": 77,
            "description": "The string pattern you want to have match, which can be any of the following combinations {}, ::, *, ?, \"\". See below for examples.",
            "itemtype": "property",
            "name": "routePattern",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Route",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Route.js",
            "line": 85,
            "description": "The regex representation for the routePattern that was passed into the constructor.",
            "itemtype": "property",
            "name": "regex",
            "type": "RegExp",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "Route",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Route.js",
            "line": 94,
            "description": "The function that should be executed when a request matches the routePattern. The {{#crossLink \"Router\"}}{{/crossLink}} class will be using this property.",
            "itemtype": "property",
            "name": "callback",
            "type": "{Function}",
            "access": "public",
            "tagname": "",
            "class": "Route",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Route.js",
            "line": 102,
            "description": "The scope of the callback function that should be executed. The {{#crossLink \"Router\"}}{{/crossLink}} class will be using this property.",
            "itemtype": "property",
            "name": "callbackScope",
            "type": "{any}",
            "access": "public",
            "tagname": "",
            "class": "Route",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Route.js",
            "line": 115,
            "description": "Converts the routePattern that was passed into the constructor to a regexp object.",
            "itemtype": "method",
            "name": "routePatternToRegexp",
            "params": [
                {
                    "name": "routePattern",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RegExp"
            },
            "access": "protected",
            "tagname": "",
            "class": "Route",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/model/Route.js",
            "line": 139,
            "description": "Determine if a route matches a routePattern.",
            "itemtype": "method",
            "name": "match",
            "params": [
                {
                    "name": "route",
                    "description": "The route or path to match against the routePattern that was passed into the constructor.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array.<any>"
            },
            "example": [
                "\n    var route = new Route('/games/{gameName}/:level:/', this.method, this);\n    console.log( route.match('/games/asteroids/2/') );"
            ],
            "class": "Route",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "js/net/NetworkMonitor.js",
            "line": 27,
            "description": "Adds the necessary event listeners to listen for the 'online' and 'offline' events.\nAlso dispatches a {{#crossLink \"NetworkMonitorEvent\"}}{{/crossLink}} right away with the status of the network connection.\nIt is recommended you call NetworkMonitor.start(); when your application starts up.",
            "example": [
                "\n     NetworkMonitor.start();"
            ],
            "itemtype": "method",
            "name": "start",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "NetworkMonitor",
            "module": "StructureJS"
        },
        {
            "file": "js/net/NetworkMonitor.js",
            "line": 48,
            "description": "Returns the online status of the browser. The property returns a boolean value, with true for being online and false for being offline.",
            "example": [
                "\n     NetworkMonitor.connected();"
            ],
            "itemtype": "method",
            "name": "connected",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "NetworkMonitor",
            "module": "StructureJS"
        },
        {
            "file": "js/net/NetworkMonitor.js",
            "line": 62,
            "description": "Returns if the status type ('online' or 'offline') if computer or device is connected to the internet.",
            "example": [
                "\n     NetworkMonitor.getStatus();"
            ],
            "itemtype": "method",
            "name": "getStatus",
            "return": {
                "description": "Returns 'online' or 'offline'.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "NetworkMonitor",
            "module": "StructureJS"
        },
        {
            "file": "js/net/NetworkMonitor.js",
            "line": 76,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "onNetworkMonitorEvent",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "NetworkMonitor",
            "module": "StructureJS"
        },
        {
            "file": "js/net/NetworkMonitor.js",
            "line": 89,
            "description": "Registers an event listener object with an NetworkMonitor object so that the listener receives notification of an event.",
            "example": [
                "\n     NetworkMonitor.addEventListener(NetworkMonitorEvent.STATUS, this.handlerMethod, this);\n     ClassName.prototype.handlerMethod = function (event) {\n         console.log(event.status, event.connected);\n     }"
            ],
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener function that processes the event. This function must accept an Event object as its only parameter and must return nothing, as this example shows. @example function(event:Event):void",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "Binds the scope to a particular object (scope is basically what \"this\" refers to in your function). This can be very useful in JavaScript because scope isn't generally maintained.",
                    "type": "Any"
                },
                {
                    "name": "priority",
                    "description": "Influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "NetworkMonitor",
            "module": "StructureJS"
        },
        {
            "file": "js/net/NetworkMonitor.js",
            "line": 108,
            "description": "Removes a specified listener from the NetworkMonitor object.",
            "example": [
                "\n     NetworkMonitor.removeEventListener(NetworkMonitorEvent.STATUS, this.handlerMethod, this);\n     private handlerMethod(event:NetworkMonitorEvent):void {\n         console.log(event.status, event.connected);\n     }"
            ],
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener object to remove.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope of the listener object to be removed.\nTo keep things consistent this parameter is required.",
                    "type": "Any"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "NetworkMonitor",
            "module": "StructureJS"
        },
        {
            "file": "js/net/NetworkMonitor.js",
            "line": 126,
            "description": "<p>Dispatches an event within the NetworkMonitorEvent object.</p>",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The Event object that is dispatched into the event flow. You can create custom events, the only requirement is all events must\nextend the {{#crossLink \"NetworkMonitorEvent\"}}{{/crossLink}}.",
                    "type": "NetworkMonitorEvent"
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "NetworkMonitor",
            "module": "StructureJS"
        },
        {
            "file": "js/net/NetworkMonitor.js",
            "line": 137,
            "description": "A reference to the EventDispatcher object.",
            "itemtype": "property",
            "name": "_eventDispatcher",
            "type": "{EventDispatcher}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "NetworkMonitor",
            "module": "StructureJS"
        },
        {
            "file": "js/net/NetworkMonitor.js",
            "line": 146,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "property",
            "name": "_initialized",
            "type": "{boolean}",
            "access": "private",
            "tagname": "",
            "class": "NetworkMonitor",
            "module": "StructureJS"
        },
        {
            "file": "js/plugin/jquery.eventListener.js",
            "line": 11,
            "description": "A bind polyfill for browsers that don't support the bind method.",
            "class": "BrowserUtil",
            "module": "StructureJS"
        },
        {
            "file": "js/plugin/jquery.eventListener.js",
            "line": 31,
            "description": "Generates a hash string from the string being passed in. In this case it is a function that is casted as string value.",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "BrowserUtil",
            "module": "StructureJS"
        },
        {
            "file": "js/plugin/jquery.eventListener.js",
            "line": 52,
            "description": "The jQuery addEventListener plugin",
            "class": "BrowserUtil",
            "module": "StructureJS"
        },
        {
            "file": "js/plugin/jquery.eventListener.js",
            "line": 86,
            "description": "The jQuery removeEventListener plugin",
            "class": "BrowserUtil",
            "module": "StructureJS"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 25,
            "description": "Dispatches a breakpoint event.",
            "itemtype": "method",
            "name": "enable",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 40,
            "overridden": "EventDispatcher.disable",
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 50,
            "description": "Returns the name of the browser.",
            "itemtype": "method",
            "name": "browserName",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     BrowserUtil.browserName();\n     // 'Chrome'"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 64,
            "description": "Returns the version of the browser.",
            "itemtype": "method",
            "name": "browserVersion",
            "params": [
                {
                    "name": "majorVersion",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Number|string"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     BrowserUtil.browserVersion();\n     // 39\n\n     BrowserUtil.browserVersion(false);\n     // '39.0.2171.99'"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 89,
            "description": "Gets the browser name a user agent.",
            "itemtype": "method",
            "name": "getBrowser",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Array.<string>"
            },
            "static": 1,
            "example": [
                "\n     BrowserUtil.getBrowser();\n     // [\"Chrome\", \"39.0.2171.99\"]"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 113,
            "description": "Determines if the device OS is Android.",
            "itemtype": "method",
            "name": "isAndroid",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     BrowserUtil.isAndroid();\n     // false"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 127,
            "description": "Determines if the device OS is Android.",
            "itemtype": "method",
            "name": "isBlackBerry",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     BrowserUtil.isBlackBerry();\n     // false"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 141,
            "description": "Determines if the device OS is IOS.",
            "itemtype": "method",
            "name": "isIOS",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     BrowserUtil.isIOS();\n     // false"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 155,
            "description": "Determines if the device OS is Opera Mini.",
            "itemtype": "method",
            "name": "isOperaMini",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     BrowserUtil.isOperaMini();\n     // false"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 169,
            "description": "Determines if the device OS is IE Mobile.",
            "itemtype": "method",
            "name": "isIEMobile",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     BrowserUtil.isIEMobile();\n     // false"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 183,
            "description": "Determines if the it is run on a mobile or desktop device.",
            "itemtype": "method",
            "name": "isMobile",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     BrowserUtil.isMobile();\n     // false"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 197,
            "description": "Determines if the browser can you Browser History push states.",
            "itemtype": "method",
            "name": "hasBrowserHistory",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     BrowserUtil.hasBrowserHistory();\n     // true"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 211,
            "description": "Determines if the browser can you Local Storage.",
            "itemtype": "method",
            "name": "hasLocalStorage",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     BrowserUtil.hasLocalStorage();\n     // true"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 230,
            "description": "Determines if the browser can you Session Storage.",
            "itemtype": "method",
            "name": "hasSessionStorage",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     BrowserUtil.hasSessionStorage();\n     // true"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 249,
            "description": "Get the current breakpoint from the style sheets. You must add a body:after property with a specific content\nin each of your style sheets for this functionality to work.",
            "itemtype": "method",
            "name": "getBreakpoint",
            "return": {
                "description": "The string value of the current style sheet.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     // For each of your different style sheets add something like below:\n     // screen_lg.css\n     body:after {\n         content: 'screen_lg';  width: 1px; height: 1px; padding: 0; margin: -1px; border: 0; position: absolute; clip: rect(0 0 0 0); overflow: hidden;\n     }\n     // screen_sm.css\n     body:after {\n         content: 'screen_sm';  width: 1px; height: 1px; padding: 0; margin: -1px; border: 0; position: absolute; clip: rect(0 0 0 0); overflow: hidden;\n     }\n\n     BrowserUtil.getBreakpoint();\n     // 'screen_lg'\n\n     // Add a listener to get notified when the browser is resized:\n     BrowserUtil.addEventListener(BaseEvent.RESIZE, this._onBreakpointChange, this);\n     ...\n     ClassName.prototype._onBreakpointChange = function (baseEvent) {\n         console.log(baseEvent.data);\n         // 'screen_sm'\n     };"
            ],
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 282,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "addEventListener",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 294,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "removeEventListener",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 304,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "dispatchEvent",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 321,
            "description": "Dispatches a breakpoint event.",
            "itemtype": "method",
            "name": "_onBreakpointChange",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 331,
            "description": "A reference to the EventDispatcher object.",
            "itemtype": "property",
            "name": "_eventDispatcher",
            "type": "{EventDispatcher}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 340,
            "description": "A reference to the browser window object.",
            "itemtype": "property",
            "name": "_window",
            "type": "{Window}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 349,
            "description": "A reference to the getComputedStyle method.",
            "itemtype": "property",
            "name": "_styleDeclaration",
            "type": "{any}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 358,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "property",
            "name": "_onBreakpointChangeHandler",
            "type": "{any}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 367,
            "description": "The delay in milliseconds for the Util.{{#crossLink \"Util/debounce:method\"}}{{/crossLink}} method that dispatches\nthe BaseEvent.RESIZE event to get the your browser breakpoints. See {{#crossLink \"BrowserUtil/getBreakpoint:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "debounceDelay",
            "type": "{number}",
            "default": "250",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BrowserUtil.js",
            "line": 378,
            "description": "The isEnabled property is used to keep track of the enabled state of listening for Breakpoint changes.",
            "itemtype": "property",
            "name": "isEnabled",
            "type": "{boolean}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "BrowserUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BulkLoader.js",
            "line": 38,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "addFile",
            "params": [
                {
                    "name": "dataStore",
                    "description": "",
                    "type": "IDataStore"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "BulkLoader",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BulkLoader.js",
            "line": 57,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "getFile",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "BulkLoader",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BulkLoader.js",
            "line": 68,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "getImage",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Image"
            },
            "access": "public",
            "tagname": "",
            "class": "BulkLoader",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BulkLoader.js",
            "line": 80,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "start",
            "access": "public",
            "tagname": "",
            "class": "BulkLoader",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BulkLoader.js",
            "line": 95,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "clear",
            "access": "public",
            "tagname": "",
            "class": "BulkLoader",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/BulkLoader.js",
            "line": 110,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "onLoadComplete",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "LoaderEvent"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BulkLoader",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/ComponentFactory.js",
            "line": 23,
            "description": "Takes a jQuery object that has one or more elements in it and passes a single jQuery element into the constructor of the class that is also being passed in.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "$element",
                    "description": "One or more jQuery referenced DOM elements.",
                    "type": "JQuery"
                },
                {
                    "name": "ComponentClass",
                    "description": "The class that you want instantiated.",
                    "type": "Any"
                },
                {
                    "name": "scope",
                    "description": "This scope (parent object) is needed to instantiate the component/view with the use of the {{#crossLink \"DisplayObjectContainer/addChild:method\"}}{{/crossLink}} method.",
                    "type": "DisplayObjectContainer",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "Returns a list of instantiated components/views so you can manage them within the Class that created them.",
                "type": "Array.<any>"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     ComponentFactory.create($('.js-list'), SomeClass, this);"
            ],
            "class": "ComponentFactory",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/ComponentFactory.js",
            "line": 65,
            "description": "Helper method to create the component.",
            "itemtype": "method",
            "name": "_createComponent",
            "access": "private",
            "tagname": "",
            "class": "ComponentFactory",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/DateUtil.js",
            "line": 22,
            "description": "Returns the suffix of a given day.",
            "itemtype": "method",
            "name": "getDaySuffix",
            "params": [
                {
                    "name": "today",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     DateUtil.getDaySuffix(1);\n     // 'st'\n\n     DateUtil.getDaySuffix(2);\n     // 'nd'\n\n     DateUtil.getDaySuffix(3);\n     // 'rd'\n\n     DateUtil.getDaySuffix(4);\n     // 'th'"
            ],
            "class": "DateUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/DateUtil.js",
            "line": 47,
            "description": "A list of day names.",
            "itemtype": "property",
            "name": "LONG_DAY_LABELS",
            "type": "{Array.<any>}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "final": 1,
            "class": "DateUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/DateUtil.js",
            "line": 57,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "property",
            "name": "SHORT_DAY_LABELS",
            "type": "{Array.<any>}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "final": 1,
            "class": "DateUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/DateUtil.js",
            "line": 67,
            "description": "A list of month names.",
            "itemtype": "property",
            "name": "LONG_MONTH_LABELS",
            "type": "{Array.<any>}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "final": 1,
            "class": "DateUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/DateUtil.js",
            "line": 77,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "property",
            "name": "SHORT_MONTH_LABELS",
            "type": "{Array.<any>}",
            "access": "public",
            "tagname": "",
            "static": 1,
            "final": 1,
            "class": "DateUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Extend.js",
            "line": 1,
            "description": "UMD (Universal Module Definition) wrapper.",
            "class": "Extend",
            "module": "StructureJS"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 22,
            "description": "Returns a number constrained between min and max.",
            "itemtype": "method",
            "name": "constrain",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n     MathUtil.constrain(12, 3, 20);\n     // 12\n\n     MathUtil.constrain(22, 3, 20);\n     // 20\n\n     MathUtil.constrain(0, 3, 20);\n     // 3"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 51,
            "description": "Returns a random number between min and max.",
            "itemtype": "method",
            "name": "randomRange",
            "params": [
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wholeNumber",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 70,
            "description": "Returns the percentage of a number in a given range.\nExample: num = 15 range 10 to 20 // outputs 0.5",
            "itemtype": "method",
            "name": "rangeToPercent",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "constrainMin",
                    "description": "Returns 0 if num < min.",
                    "type": "Boolean"
                },
                {
                    "name": "constrainMax",
                    "description": "Returns 1 if num > max.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n     MathUtil.rangeToPercent(15, 10, 20);\n     // 0.5"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 96,
            "description": "Returns the number that corresponds to the percentage in a given range.\nExample: percent = 0.5 range 10 to 20 // outputs 15",
            "itemtype": "method",
            "name": "percentToRange",
            "params": [
                {
                    "name": "percent",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n     MathUtil.percentToRange(0.5, 10, 20);\n     // 15"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 112,
            "description": "Re-maps a number from one range to another. The output is the same as inputing the result of rangeToPercent() numbero percentToRange().\nExample: num = 10, min1 = 0, max1 = 100, min2 = 0, max2 = 50 // outputs 5",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "min1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "min2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n     MathUtil.map(10, 0, 100, 0, 50);\n     // 5"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 144,
            "description": "Converts radians to degrees.",
            "itemtype": "method",
            "name": "radiansToDegrees",
            "params": [
                {
                    "name": "radians",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n     MathUtil.radiansToDegrees(1.5707963267948966);\n     // 90\n\n     MathUtil.radiansToDegrees(3.141592653589793);\n     // 180"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 160,
            "description": "Converts degrees to radians.",
            "itemtype": "method",
            "name": "degreesToRadians",
            "params": [
                {
                    "name": "degrees",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n     MathUtil.degreesToRadians(90);\n     // 1.5707963267948966\n\n     MathUtil.degreesToRadians(180);\n     // 3.141592653589793"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 176,
            "description": "Returns 1 if the value is >= 0. Returns -1 if the value is < 0.",
            "itemtype": "method",
            "name": "sign",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n     MathUtil.sign(23);\n     // 1\n\n     MathUtil.sign(-23);\n     // -1"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 195,
            "description": "Check if number is positive (zero is positive).",
            "itemtype": "method",
            "name": "isPositive",
            "params": [
                {
                    "name": "num",
                    "description": "The number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n     MathUtil.isPositive(23);\n     // true\n\n     MathUtil.isPositive(-23);\n     // false"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 211,
            "description": "Check if number is negative.",
            "itemtype": "method",
            "name": "isNegative",
            "params": [
                {
                    "name": "num",
                    "description": "The",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n     MathUtil.isNegative(23);\n     // false\n\n     MathUtil.isNegative(-23);\n     // true"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 227,
            "description": "Check if number is odd (convert to Integer if necessary).",
            "itemtype": "method",
            "name": "isOdd",
            "params": [
                {
                    "name": "num",
                    "description": "The number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n     MathUtil.isOdd(2);\n     // false\n\n     MathUtil.isOdd(3);\n     // true"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 245,
            "description": "Check if number is even (convert to Integer if necessary).",
            "itemtype": "method",
            "name": "isEven",
            "params": [
                {
                    "name": "num",
                    "description": "The number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n     MathUtil.isEven(2);\n     // true\n\n     MathUtil.isEven(3);\n     // false"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 263,
            "description": "Check if number is Prime (divisible only by itself and one).",
            "itemtype": "method",
            "name": "isPrime",
            "params": [
                {
                    "name": "num",
                    "description": "The number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n     MathUtil.isPrime(4);\n     // false\n\n     MathUtil.isPrime(5);\n     // true"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 289,
            "description": "Calculate the factorial of the integer.",
            "itemtype": "method",
            "name": "factorial",
            "params": [
                {
                    "name": "num",
                    "description": "The number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n     MathUtil.factorial(5);\n     // 120\n\n     MathUtil.factorial(9);\n     // 362880"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MathUtil.js",
            "line": 314,
            "description": "Return an array of divisors of the integer.",
            "itemtype": "method",
            "name": "getDivisors",
            "params": [
                {
                    "name": "num",
                    "description": "The number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array.<number>"
            },
            "example": [
                "\n"
            ],
            "class": "MathUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MerchantUtil.js",
            "line": 22,
            "description": "Determines if credit card is valid using the Luhn formula.",
            "itemtype": "method",
            "name": "isCreditCard",
            "params": [
                {
                    "name": "cardNumber",
                    "description": "The credit card number.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<code>true</code> if String is a valid credit card number; otherwise <code>false</code>.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     MerchantUtil.isCreditCard('4556106734384949');\n     // true"
            ],
            "class": "MerchantUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MerchantUtil.js",
            "line": 54,
            "description": "Encode a credit card number as a string and encode all digits except the last <code>digitsShown</code>.",
            "itemtype": "method",
            "name": "encodeCreditCardNumber",
            "params": [
                {
                    "name": "strNumber",
                    "description": "The credit card number as string.",
                    "type": "String"
                },
                {
                    "name": "digitsShown",
                    "description": "Display this many digits at the end of the card number for security purposes.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "4"
                },
                {
                    "name": "encodeChar",
                    "description": "Optional encoding character to use instead of default '*'.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     MerchantUtil.encodeCreditCardNumber('4556106734384949');\n     // ************4949\n\n     MerchantUtil.encodeCreditCardNumber('4556106734384949', 5, 'x');\n     // xxxxxxxxxxx84949"
            ],
            "class": "MerchantUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MerchantUtil.js",
            "line": 81,
            "description": "Returns a credit card provider name from the credit card number passed in.",
            "itemtype": "method",
            "name": "getCreditCardProvider",
            "params": [
                {
                    "name": "cardNumber",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n     MerchantUtil.getCreditCardProvider(\"4556106734384949\");\n     // visa\n\n     MerchantUtil.getCreditCardProvider(\"5428070016026573\");\n     // mastercard"
            ],
            "class": "MerchantUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/MerchantUtil.js",
            "line": 117,
            "description": "Validate a credit card's expiration date.",
            "itemtype": "method",
            "name": "isValidExpirationDate",
            "params": [
                {
                    "name": "month",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "year",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n     MerchantUtil.isValidExDate(11, 2010);\n     // false"
            ],
            "class": "MerchantUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/NumberUtil.js",
            "line": 22,
            "description": "Converts bytes into megabytes.",
            "itemtype": "method",
            "name": "bytesToMegabytes",
            "params": [
                {
                    "name": "bytes",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n"
            ],
            "class": "NumberUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/NumberUtil.js",
            "line": 36,
            "description": "Converts centimeters into inches.",
            "itemtype": "method",
            "name": "centimeterToInch",
            "params": [
                {
                    "name": "cm",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n    NumberUtil.centimeterToInch(1);\n    // 0.3937"
            ],
            "class": "NumberUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/NumberUtil.js",
            "line": 51,
            "description": "Converts inches into centimeters.",
            "itemtype": "method",
            "name": "inchToCentimeter",
            "params": [
                {
                    "name": "inch",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n    NumberUtil.inchToCentimeter(1);\n    // 2.54"
            ],
            "class": "NumberUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/NumberUtil.js",
            "line": 66,
            "description": "Converts feet into meters.",
            "itemtype": "method",
            "name": "feetToMeter",
            "params": [
                {
                    "name": "feet",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n    NumberUtil.feetToMeter(1);\n    // 0.3048\n"
            ],
            "class": "NumberUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/NumberUtil.js",
            "line": 82,
            "description": "Converts seconds into hour, minutes, seconds.",
            "itemtype": "method",
            "name": "convertToHHMMSS",
            "params": [
                {
                    "name": "seconds",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "showHours",
                    "description": "[boolean=true] By default if the time does not pass one hour it will show 00:05:34. Pass false to display the time as 05:34 until it gets pass one hour and then it will show 01:00:00"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    NumberUtil.convertToHHMMSS(33333);\n    // '09:15:33'"
            ],
            "class": "NumberUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/NumberUtil.js",
            "line": 112,
            "description": "Formats a number from 0-9 to display with 2 digits.",
            "itemtype": "method",
            "name": "doubleDigitFormat",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    NumberUtil.doubleDigitFormat(0);\n    // '00'\n\n    NumberUtil.doubleDigitFormat(5);\n    // '05'\n\n    NumberUtil.doubleDigitFormat(9);\n    // '09'"
            ],
            "class": "NumberUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/NumberUtil.js",
            "line": 136,
            "description": "Formats a currency string as a number.",
            "itemtype": "method",
            "name": "unformatUnit",
            "params": [
                {
                    "name": "value",
                    "description": "The string currency that you want converted into a number.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the number value of the currency string.",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    NumberUtil.unformatUnit('$1,234,567.89');\n    // 1234567.89\n\n    NumberUtil.unformatUnit('1.234.567,89 €');\n    // 1234567.89\n\n    NumberUtil.unformatUnit('$-123,456,789.99');\n    // -123456789.99"
            ],
            "class": "NumberUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/NumberUtil.js",
            "line": 173,
            "description": "Formats a number as a currency string.",
            "itemtype": "method",
            "name": "formatUnit",
            "params": [
                {
                    "name": "value",
                    "description": "The number value you want formatted.",
                    "type": "Number"
                },
                {
                    "name": "decimalPlacement",
                    "description": "How many decimal placements you want to show.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2"
                },
                {
                    "name": "decimalSeparator",
                    "description": "The character you want to use as the thousands separator.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'.'"
                },
                {
                    "name": "thousandsSeparator",
                    "description": "The character you want to use as the thousands separator.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "','"
                },
                {
                    "name": "currencySymbol",
                    "description": "The symbol you would like to add.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                },
                {
                    "name": "currencySymbolPlacement",
                    "description": "The placement of the symbol. Use 0 to place in front or 1 to place at the end.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Returns the formatted currency.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    NumberUtil.formatUnit(1234567.89, 2, \".\", \",\", \"$\", 0);\n    // '$1,234,567.89'\n\n    NumberUtil.formatUnit(12341234.56, 2, \"*\", \",\", \" €\", 1);\n    // '12,341,234*56 €'\n\n    NumberUtil.formatUnit(-1900.24, 1);\n    // '-1,900.2'"
            ],
            "class": "NumberUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/NumberUtil.js",
            "line": 226,
            "description": "Convert Fahrenheit to Celsius.",
            "itemtype": "method",
            "name": "fahrenheitToCelsius",
            "params": [
                {
                    "name": "fahrenheit",
                    "description": "The fahrenheit value.",
                    "type": "Number"
                },
                {
                    "name": "decimals",
                    "description": "The number of decimals.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n     MathUtil.fahrenheitToCelsius(32);\n     // 0\n\n     MathUtil.fahrenheitToCelsius(212);\n     // 100"
            ],
            "class": "NumberUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/NumberUtil.js",
            "line": 258,
            "description": "Convert Celsius to Fahrenheit.",
            "itemtype": "method",
            "name": "celsiusToFahrenheit",
            "params": [
                {
                    "name": "celsius",
                    "description": "The celsius value.",
                    "type": "Number"
                },
                {
                    "name": "decimals",
                    "description": "The number of decimals.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n     MathUtil.celsiusToFahrenheit(0);\n     // 32\n\n     MathUtil.celsiusToFahrenheit(100);\n     // 212"
            ],
            "class": "NumberUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 22,
            "description": "Gets the extension name off the string being passed in.",
            "itemtype": "method",
            "name": "getExtension",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "withDot",
                    "description": "If you want the period to be included in the extension name.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     StringUtil.getExtension('file.exe');\n     // 'exe'\n\n     StringUtil.getExtension('file.exe', true);\n     // '.exe'"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 43,
            "description": "Converts a string to a sentence case string.",
            "itemtype": "method",
            "name": "toSentence",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "separator",
                    "description": "Can be any string you want to use as a separator.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     StringUtil.toSentence(\"liveDown_by-the.River\");\n     // 'live down by the river'\n\n     StringUtil.toSentence(\"liveDown_by-the.River\", '-');\n     // 'live-down-by-the-river'\n\n     StringUtil.toSentence(\"liveDown_by-the.River\", '_');\n     // 'live_down_by_the_river'\n\n     StringUtil.toSentence(\"liveDown_by-the.River\", '/');\n     // 'live/down/by/the/river'"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 76,
            "description": "Converts a string to a camel case string.",
            "itemtype": "method",
            "name": "toCamelCase",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     StringUtil.toCamelCase(\"liveDown_by-the.River\");\n     // 'liveDownByTheRiver'"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 94,
            "description": "Converts a hyphen string to a pascal case string.",
            "itemtype": "method",
            "name": "toPascalCase",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     StringUtil.toPascalCase(\"liveDown_by-the.River\");\n     // 'LiveDownByTheRiver'"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 112,
            "description": "Converts a string to a constant case string.",
            "itemtype": "method",
            "name": "toConstantCase",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     StringUtil.toConstantCase(\"liveDown_by-the.River\");\n     // 'LIVE_DOWN_BY_THE_RIVER'"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 128,
            "description": "Creates a universally unique identifier.",
            "itemtype": "method",
            "name": "createUUID",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     StringUtil.createUUID();\n     // 'a95d7134-3342-4001-bcea-cc0371b70dec'"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 147,
            "description": "Converts a query string to an object.",
            "itemtype": "method",
            "name": "queryStringToObject",
            "params": [
                {
                    "name": "queryString",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "useParseFloat",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Object|Null"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     StringUtil.queryStringToObject('?name=Robert&age=23&gender=male');\n     // {name: 'Robert', age: 23, gender: 'male'}\n\n     StringUtil.queryStringToObject('?name=Robert&age=23&gender=male', false);\n     // {name: 'Robert', age: '23', gender: 'male'}"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 181,
            "description": "Remove all whitespace from the string passed in.",
            "itemtype": "method",
            "name": "removeAllWhitespace",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     var str = '   a b    c d e f g ';\n     StringUtil.removeAllWhitespace(str);\n     // 'abcdefg'"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 197,
            "description": "Remove leading and trailing whitespace.",
            "itemtype": "method",
            "name": "removeLeadingTrailingWhitespace",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     var str = '   a b    c d e f g ';\n     StringUtil.removeLeadingTrailingWhitespace(str);\n     // 'a b    c d e f g'"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 213,
            "itemtype": "method",
            "name": "truncate",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "length",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n      StringUtil.truncate('Robert is cool and he likes bruschetta.', 14));\n      // 'Robert is cool...'"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 233,
            "description": "Replaces each format item in a specified string with the text equivalent of a corresponding object's value.",
            "itemtype": "method",
            "name": "format",
            "return": {
                "description": "",
                "type": "String"
            },
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "...rest",
                    "description": "",
                    "type": "Array.<any>"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     StringUtil.format('Robert is {0}. Very {0} and {1}!', 'cool', 'smart');\n     // 'Robert is cool. Very cool and smart!'"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/StringUtil.js",
            "line": 259,
            "description": "Updates a value in the query string by its key name.",
            "itemtype": "method",
            "name": "paramReplace",
            "params": [
                {
                    "name": "queryString",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "String|void"
            },
            "example": [
                "\n     StringUtil.paramReplace('?name=Robert&age=23&gender=male', 'gender', 'female');\n     // '?name=Robert&age=23&gender=female'"
            ],
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/TemplateFactory.js",
            "line": 25,
            "description": "Creates a template.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "templatePath",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "data",
                    "description": "",
                    "optional": true,
                    "optdefault": "any"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     TemplateFactory.create('templateName', {some: 'data'});"
            ],
            "class": "TemplateFactory",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/TemplateFactory.js",
            "line": 78,
            "description": "A constant value for using Underscore or Lodash templates.",
            "itemtype": "property",
            "name": "UNDERSCORE",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "final": 1,
            "static": 1,
            "class": "TemplateFactory",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/TemplateFactory.js",
            "line": 88,
            "description": "A constant value for using Handlebars templates. This is the default template engine.",
            "itemtype": "property",
            "name": "HANDLEBARS",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "final": 1,
            "static": 1,
            "class": "TemplateFactory",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/TemplateFactory.js",
            "line": 98,
            "description": "Sets the template engine type for this TemplateFactory class. The default is TemplateFactory.HANDLEBARS",
            "itemtype": "property",
            "name": "templateEngine",
            "type": "{string}",
            "default": "TemplateFactory.HANDLEBARS",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "TemplateFactory",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/TemplateFactory.js",
            "line": 108,
            "description": "The global namespace for pre-compiled templates.",
            "itemtype": "property",
            "name": "templateNamespace",
            "type": "{string}",
            "default": "'JST'",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "TemplateFactory",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 34,
            "description": "A reference to the setInterval object.",
            "itemtype": "property",
            "name": "_timer",
            "type": "{Function}",
            "access": "protected",
            "tagname": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 42,
            "description": "The total number of times the timer has fired since it started at zero. If the timer has been reset, only the fires since the reset are counted.",
            "itemtype": "property",
            "name": "currentCount",
            "type": "{int}",
            "access": "protected",
            "tagname": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 50,
            "description": "The delay, in milliseconds, between timer events. If you set the delay interval while the timer is running, the timer will restart at the same repeatCount iteration.\n<strong>Note:</strong> A delay lower than 20 milliseconds is not recommended.",
            "itemtype": "property",
            "name": "delay",
            "type": "{number}",
            "access": "protected",
            "tagname": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 59,
            "description": "The total number of times the timer is set to run. If the repeat count is set to 0, the timer continues indefinitely. If the repeat count is nonzero, the timer runs the specified number of times. If repeatCount is set to a total that is the same or less then currentCount the timer stops and will not fire again.",
            "itemtype": "property",
            "name": "repeatCount",
            "type": "{int}",
            "access": "protected",
            "tagname": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 67,
            "description": "The timer's current state; true if the timer is running, otherwise false.",
            "itemtype": "property",
            "name": "running",
            "type": "{boolean}",
            "readonly": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 79,
            "description": "Returns the total number of times the timer has fired since it started at zero.",
            "itemtype": "method",
            "name": "getCurrentCount",
            "return": {
                "description": "The total number of times the timer has fired since it started at zero.",
                "type": "Number"
            },
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 88,
            "description": "Returns the delay time in milliseconds.",
            "itemtype": "method",
            "name": "getDelay",
            "return": {
                "description": "Returns the delay time in milliseconds.",
                "type": "Number"
            },
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 97,
            "description": "Sets the delay, in milliseconds, between timer events.",
            "itemtype": "method",
            "name": "setDelay",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 109,
            "description": "Returns the total number of times the timer is set to run.",
            "itemtype": "method",
            "name": "getRepeatCount",
            "return": {
                "description": "Returns the total number of times the timer is set to run.",
                "type": "Number"
            },
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 118,
            "description": "Set the total number of times the timer is set to run. If the repeat count is set to 0, the timer continues indefinitely. If the repeat count is nonzero, the timer runs the specified number of times. If repeatCount is set to a total that is the same or less then currentCount the timer stops and will not fire again.",
            "itemtype": "method",
            "name": "setRepeatCount",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 131,
            "description": "Stops the timer, if it is running, and sets the currentCount property back to 0, like the reset button of a stopwatch.",
            "itemtype": "method",
            "name": "reset",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 141,
            "description": "Starts the timer, if it is not already running.",
            "itemtype": "method",
            "name": "start",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 157,
            "description": "Stops the timer.",
            "itemtype": "method",
            "name": "stop",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 167,
            "itemtype": "method",
            "name": "decrementCounter",
            "access": "protected",
            "tagname": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Timer.js",
            "line": 185,
            "overridden": "EventDispatcher.destroy",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Util.js",
            "line": 22,
            "description": "Generates a unique ID. If a prefix is passed in, the value will be appended to it.",
            "itemtype": "method",
            "name": "uniqueId",
            "params": [
                {
                    "name": "prefix",
                    "description": "The string value used for the prefix.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the unique identifier.",
                "type": "Init|string"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     var property = Util.uniqueId();\n     // 1\n\n     var property = Util.uniqueId('prefixName_');\n     // prefixName_1"
            ],
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Util.js",
            "line": 47,
            "description": "Removes a list of properties from an object.",
            "itemtype": "method",
            "name": "deletePropertyFromObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object you want to remove properties from.",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "A property name or an array of property names you want to remove from the object.",
                    "type": "string|Array.<string>"
                }
            ],
            "return": {
                "description": "Returns the object passed in without the removed the properties.",
                "type": "Any"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     var obj = { name: 'Robert', gender: 'male', phone: '555-555-5555' }\n\n     Util.deletePropertyFromObject(obj, ['phone', 'gender']);\n\n     // { name: 'Robert' }"
            ],
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Util.js",
            "line": 97,
            "description": "Renames a property name on an object.",
            "itemtype": "method",
            "name": "renamePropertyOnObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object you want to rename properties from.",
                    "type": "Object"
                },
                {
                    "name": "oldName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "newName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the object passed in renamed properties.",
                "type": "Any"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     var obj = { name: 'Robert', gender: 'male', phone: '555-555-5555' }\n\n     Util.renamePropertyOnObject(obj, 'gender', 'sex');\n\n     // { name: 'Robert', sex: 'male', phone: '555-555-5555' }"
            ],
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Util.js",
            "line": 122,
            "description": "Makes a clone of an object.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "obj",
                    "description": "The object you to clone.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a clone object of the one passed in.",
                "type": "Any"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     var cloneOfObject = Util.clone(obj);"
            ],
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Util.js",
            "line": 167,
            "description": "Converts a string or number to a boolean.",
            "itemtype": "method",
            "name": "toBoolean",
            "params": [
                {
                    "name": "strNum",
                    "description": "",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     Util.toBoolean(\"TRUE\");\n     // true\n\n     Util.toBoolean(0);\n     // false\n\n     Util.toBoolean(undefined);\n     // false"
            ],
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Util.js",
            "line": 189,
            "description": "Returns the name of the function/object passed in.",
            "itemtype": "method",
            "name": "getName",
            "params": [
                {
                    "name": "classObject",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "Returns the name of the function or object.",
                "type": "String"
            },
            "static": 1,
            "example": [
                "\n     var someClass = new SomeClass();\n     Util.getName(someClass);            // 'SomeClass'\n\n     Util.getName(function Test(){});    // 'Test'\n     Util.getName(function (){});        // 'anonymous'"
            ],
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Util.js",
            "line": 229,
            "description": "Creates and returns a new debounced version of the passed function which will postpone its execution until after\nwait milliseconds have elapsed since the last time it was invoked.",
            "itemtype": "method",
            "name": "debounce",
            "params": [
                {
                    "name": "callback",
                    "description": "The function that should be executed.",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "Milliseconds to elapsed before invoking the callback.",
                    "type": "Number"
                },
                {
                    "name": "immediate",
                    "description": "Pass true for the immediate parameter to cause debounce to trigger the function on the leading instead of the trailing edge of the wait interval. Useful in circumstances like preventing accidental double-clicks on a \"submit\" button from firing a second time.",
                    "type": "Boolean"
                },
                {
                    "name": "callbackScope",
                    "description": "The scope of the callback function that should be executed.",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     Util.debounce(this._onBreakpointChange, 250, false, this);"
            ],
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Util.js",
            "line": 268,
            "description": "TODO: YUIDoc_comment",
            "itemtype": "method",
            "name": "applyMixins",
            "params": [
                {
                    "name": "derivedCtor",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "baseCtors",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n\n               class Flies {\n                   fly() {\n                       alert('Is it a bird? Is it a plane?');\n                   }\n               }\n   \n               class Climbs {\n                   climb() {\n                       alert('My spider-sense is tingling.');\n                   }\n               }\n   \n               class HorseflyWoman implements Climbs, Flies {\n                   climb: () => void;\n                   fly: () => void;\n               }\n   \n               Util.applyMixins(HorseflyWoman, [Climbs, Flies]);"
            ],
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/Util.js",
            "line": 304,
            "description": "Keeps track of the count for the uniqueId method.",
            "itemtype": "property",
            "name": "_idCounter",
            "type": "{int}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/ValidationUtil.js",
            "line": 22,
            "description": "Determines if the String passed has a length.",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     ValidationUtil.isEmpty('sometext');\n     // false"
            ],
            "class": "ValidationUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/ValidationUtil.js",
            "line": 40,
            "description": "Determines if the two values passed in are the same.",
            "itemtype": "method",
            "name": "isMatch",
            "params": [
                {
                    "name": "value1",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "value2",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     ValidationUtil.isMatch('one@email.com', 'two@email.com');\n     // false"
            ],
            "class": "ValidationUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/ValidationUtil.js",
            "line": 56,
            "description": "Determines if the String passed in is a valid email address.",
            "itemtype": "method",
            "name": "isValidEmailAddress",
            "params": [
                {
                    "name": "email",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     ValidationUtil.isValidEmailAddress('someemail@address.com');\n     // true"
            ],
            "class": "ValidationUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/ValidationUtil.js",
            "line": 72,
            "description": "Determines if the String passed in is a phone number.",
            "itemtype": "method",
            "name": "isValidPhoneNumber",
            "params": [
                {
                    "name": "phoneNumber",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     ValidationUtil.isValidPhoneNumber('123 456 7899');\n     // true"
            ],
            "class": "ValidationUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/ValidationUtil.js",
            "line": 88,
            "description": "Determines if the String passed in is a zip code.",
            "itemtype": "method",
            "name": "isZipCode",
            "params": [
                {
                    "name": "zipCode",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     ValidationUtil.isZipCode('55067 4434');\n     // true"
            ],
            "class": "ValidationUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/ValidationUtil.js",
            "line": 104,
            "description": "Determines if the String passed in is a postal code.",
            "itemtype": "method",
            "name": "isPostalCode",
            "params": [
                {
                    "name": "postalCode",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     ValidationUtil.isPostalCode('p8n3h3');\n     // true"
            ],
            "class": "ValidationUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/util/ValidationUtil.js",
            "line": 120,
            "description": "Determines if the String passed in is a Social Security Number.",
            "itemtype": "method",
            "name": "isSocialSecurityNumber",
            "params": [
                {
                    "name": "ssn",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n     ValidationUtil.isSocialSecurityNumber('178051120');\n     // true"
            ],
            "class": "ValidationUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "js/BaseObject.js",
            "line": 27,
            "description": "The sjsId (StructureJS ID) is a unique identifier automatically assigned to most StructureJS objects upon instantiation.",
            "itemtype": "property",
            "name": "sjsId",
            "type": "{int}",
            "default": "null",
            "writeonce": "",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "BaseObject",
            "module": "StructureJS",
            "submodule": "core"
        },
        {
            "file": "js/BaseObject.js",
            "line": 40,
            "description": "Returns the fully qualified class name of an object.",
            "itemtype": "method",
            "name": "getQualifiedClassName",
            "return": {
                "description": "Returns the class name.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n    instance.getQualifiedClassName();"
            ],
            "class": "BaseObject",
            "module": "StructureJS",
            "submodule": "core"
        },
        {
            "file": "js/BaseObject.js",
            "line": 52,
            "description": "The purpose of the destroy method is to make an object ready for garbage collection. This\nshould be thought of as a one way function. Once destroy is called no further methods should be\ncalled on the object or properties accessed. It is the responsibility of those who implement this\nfunction to stop all running Timers, all running Sounds, and take any other steps necessary to make an\nobject eligible for garbage collection.\n\nBy default the destroy method will null out all properties of the class automatically. You should call destroy\non other objects before calling the super.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n    ClassName.prototype.destroy = function() {\n         this._childInstance.destroy();\n\n         _super.prototype.destroy.call(this);\n    }"
            ],
            "class": "BaseObject",
            "module": "StructureJS",
            "submodule": "core"
        },
        {
            "file": "js/ObjectManager.js",
            "line": 31,
            "description": "The isEnabled property is used to keep track of the enabled state of the object.",
            "itemtype": "property",
            "name": "isEnabled",
            "type": "{boolean}",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "ObjectManager",
            "module": "StructureJS",
            "submodule": "core"
        },
        {
            "file": "js/ObjectManager.js",
            "line": 41,
            "description": "The enable method is responsible for enabling event listeners and/or children of the containing objects.",
            "itemtype": "method",
            "name": "enable",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n    ClassName.prototype.enable = function() {\n         if (this.isEnabled === true) { return this; }\n\n         this._childInstance.addEventListener(BaseEvent.CHANGE, this.handlerMethod, this);\n         this._childInstance.enable();\n\n         return _super.prototype.enable.call(this);\n    }"
            ],
            "class": "ObjectManager",
            "module": "StructureJS",
            "submodule": "core"
        },
        {
            "file": "js/ObjectManager.js",
            "line": 64,
            "description": "The disable method is responsible for disabling event listeners and/or children of the containing objects.",
            "itemtype": "method",
            "name": "disable",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "example": [
                "\n     ClassName.prototype.disable = function() {\n         if (this.isEnabled === false) { return this; }\n\n         this._childInstance.removeEventListener(BaseEvent.CHANGE, this.handlerMethod, this);\n         this._childInstance.disable();\n\n         return _super.prototype.disable.call(this);\n     }"
            ],
            "class": "ObjectManager",
            "module": "StructureJS",
            "submodule": "core"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: overridden",
            "line": " js/controller/ApplicationCacheController.js:26"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/controller/ApplicationCacheController.js:44"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/controller/LocalStorageController.js:56"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/controller/LocalStorageController.js:66"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/controller/LocalStorageController.js:101"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/controller/LocalStorageController.js:191"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/controller/LocalStorageController.js:200"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/controller/LocalStorageController.js:217"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/CanvasElement.js:27"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/CanvasElement.js:36"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/CanvasElement.js:55"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/CanvasElement.js:74"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/CanvasElement.js:94"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/CanvasElement.js:114"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/CanvasElement.js:124"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/CanvasElement.js:130"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/CanvasElement.js:152"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/CanvasElement.js:160"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DOMElement.js:215"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/DOMElement.js:310"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DOMElement.js:310"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/DOMElement.js:414"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/DOMElement.js:447"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/DOMElement.js:457"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DOMElement.js:463"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DOMElement.js:494"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DOMElement.js:526"
        },
        {
            "message": "unknown tag: override",
            "line": " js/display/DOMElement.js:526"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DOMElement.js:566"
        },
        {
            "message": "unknown tag: override",
            "line": " js/display/DOMElement.js:566"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/display/DOMElement.js:585"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObject.js:176"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObject.js:190"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObject.js:201"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObjectContainer.js:59"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObjectContainer.js:82"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObjectContainer.js:104"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObjectContainer.js:125"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObjectContainer.js:141"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObjectContainer.js:157"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObjectContainer.js:176"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObjectContainer.js:187"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObjectContainer.js:198"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/display/DisplayObjectContainer.js:208"
        },
        {
            "message": "unknown tag: override",
            "line": " js/display/DisplayObjectContainer.js:208"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/event/BaseEvent.js:179"
        },
        {
            "message": "unknown tag: hide",
            "line": " js/event/EventDispatcher.js:134"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/event/EventDispatcher.js:284"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/model/BaseModel.js:168"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/model/BaseModel.js:181"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/model/BaseModel.js:209"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/model/Collection.js:326"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/model/Collection.js:340"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/model/Collection.js:362"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/model/Route.js:115"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/model/Route.js:139"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/net/NetworkMonitor.js:48"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/net/NetworkMonitor.js:62"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/plugin/jquery.eventListener.js:31"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/util/BrowserUtil.js:40"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/BrowserUtil.js:113"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/BrowserUtil.js:127"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/BrowserUtil.js:141"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/BrowserUtil.js:155"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/BrowserUtil.js:169"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/BrowserUtil.js:183"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/BrowserUtil.js:197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/BrowserUtil.js:211"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/BrowserUtil.js:230"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/BrowserUtil.js:249"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/DateUtil.js:22"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/Extend.js:17"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/MerchantUtil.js:22"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/MerchantUtil.js:54"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/MerchantUtil.js:81"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/MerchantUtil.js:117"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/NumberUtil.js:22"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/NumberUtil.js:36"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/NumberUtil.js:51"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/NumberUtil.js:66"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/NumberUtil.js:82"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/NumberUtil.js:112"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/NumberUtil.js:136"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/NumberUtil.js:173"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:22"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:43"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:76"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:94"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:112"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:128"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:147"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:181"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:213"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:233"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/StringUtil.js:259"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/TemplateFactory.js:25"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/Timer.js:79"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/Timer.js:88"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/Timer.js:109"
        },
        {
            "message": "unknown tag: overridden",
            "line": " js/util/Timer.js:185"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/Util.js:22"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/Util.js:47"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/Util.js:97"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/Util.js:122"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/Util.js:167"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/Util.js:189"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/ValidationUtil.js:22"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/ValidationUtil.js:40"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/ValidationUtil.js:56"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/ValidationUtil.js:72"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/ValidationUtil.js:88"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/ValidationUtil.js:104"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/util/ValidationUtil.js:120"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/BaseObject.js:40"
        },
        {
            "message": "Missing item type",
            "line": " js/controller/ApplicationCacheController.js:26"
        },
        {
            "message": "Missing item type",
            "line": " js/controller/ApplicationCacheController.js:44"
        },
        {
            "message": "Missing item type",
            "line": " js/controller/LocalStorageController.js:217"
        },
        {
            "message": "Missing item type",
            "line": " js/display/CanvasElement.js:27"
        },
        {
            "message": "Missing item type",
            "line": " js/display/CanvasElement.js:36"
        },
        {
            "message": "Missing item type",
            "line": " js/display/CanvasElement.js:55"
        },
        {
            "message": "Missing item type",
            "line": " js/display/CanvasElement.js:74"
        },
        {
            "message": "Missing item type",
            "line": " js/display/CanvasElement.js:94"
        },
        {
            "message": "Missing item type",
            "line": " js/display/CanvasElement.js:114"
        },
        {
            "message": "Missing item type",
            "line": " js/display/CanvasElement.js:124"
        },
        {
            "message": "Missing item type",
            "line": " js/display/CanvasElement.js:130"
        },
        {
            "message": "Missing item type",
            "line": " js/display/CanvasElement.js:152"
        },
        {
            "message": "Missing item type",
            "line": " js/display/CanvasElement.js:160"
        },
        {
            "message": "Missing item type",
            "line": " js/display/DOMElement.js:414"
        },
        {
            "message": "Missing item type",
            "line": " js/display/DOMElement.js:447"
        },
        {
            "message": "Missing item type",
            "line": " js/display/DOMElement.js:457"
        },
        {
            "message": "Missing item type",
            "line": " js/display/DOMElement.js:585"
        },
        {
            "message": "Missing item type\nThe setSize method sets the bounds within which the containing DisplayObject would like that component to lay itself out.",
            "line": " js/display/DisplayObject.js:201"
        },
        {
            "message": "Missing item type",
            "line": " js/event/EventDispatcher.js:284"
        },
        {
            "message": "Missing item type\nA bind polyfill for browsers that don't support the bind method.",
            "line": " js/plugin/jquery.eventListener.js:11"
        },
        {
            "message": "Missing item type\nGenerates a hash string from the string being passed in. In this case it is a function that is casted as string value.",
            "line": " js/plugin/jquery.eventListener.js:31"
        },
        {
            "message": "Missing item type\nThe jQuery addEventListener plugin",
            "line": " js/plugin/jquery.eventListener.js:52"
        },
        {
            "message": "Missing item type\nThe jQuery removeEventListener plugin",
            "line": " js/plugin/jquery.eventListener.js:86"
        },
        {
            "message": "Missing item type",
            "line": " js/util/BrowserUtil.js:40"
        },
        {
            "message": "Missing item type\nUMD (Universal Module Definition) wrapper.",
            "line": " js/util/Extend.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js/util/Timer.js:185"
        }
    ]
}